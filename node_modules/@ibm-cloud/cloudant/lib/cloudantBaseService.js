"use strict";
/**
 * Â© Copyright IBM Corporation 2020. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudantBaseService = void 0;
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
// eslint-disable-next-line node/no-unpublished-import
var tough_cookie_1 = require("tough-cookie");
var auth_1 = require("../auth");
var common_1 = require("./common");
/**
 * Cloudant specific service that extends the base service functions.
 *
 * Cloudant Service make it available to use CouchDB specific Session authentication
 * during service requests.
 */
var CloudantBaseService = /** @class */ (function (_super) {
    __extends(CloudantBaseService, _super);
    /**
     * Configuration values to use Cloudant service.
     * @param {Authenticator} userOptions.authenticator CouchdbSessionAuthenticator object can be used
     *   to authenticate requests to the service.
     * @param {string} [userOptions.jar] When CouchdbSessionAuthenticator is the Authenticator, a Cookie Jar
     *   must be in use. So a new jar will be created, if there is no custom one.
     */
    function CloudantBaseService(userOptions) {
        var _this = this;
        if (userOptions.authenticator instanceof auth_1.CouchdbSessionAuthenticator) {
            userOptions.jar = userOptions.jar || new tough_cookie_1.CookieJar();
        }
        _this = _super.call(this, userOptions) || this;
        _this.configureSessionAuthenticator();
        return _this;
    }
    /**
     * Set the service URL to send requests to and
     * use the new service URL for CouchDB Session Authentication
     * to claim session token from.
     *
     * @param {string} url The base URL for the service.
     */
    CloudantBaseService.prototype.setServiceUrl = function (url) {
        _super.prototype.setServiceUrl.call(this, url);
        this.configureSessionAuthenticator();
    };
    /**
     * Configure the service using external configuration
     * Cloudant specific extensions:
     * - Apply the new base service options on CouchdbSessionAuthenticator.
     *
     * @param {string} serviceName The name of the service. Will be used to read from external
     * configuration.
     */
    CloudantBaseService.prototype.configureService = function (serviceName) {
        // Read external configuration and set as request defaults.
        _super.prototype.configureService.call(this, serviceName);
        this.configureSessionAuthenticator();
    };
    /**
     * Turn request body compression on or off.
     * Cloudant specific extensions:
     * - Apply the gzip compression option on CouchdbSessionAuthenticator.
     *
     * @param {boolean} setting Will turn it on if 'true', off if 'false'.
     */
    CloudantBaseService.prototype.setEnableGzipCompression = function (setting) {
        // Read external configuration and set as request defaults.
        _super.prototype.setEnableGzipCompression.call(this, setting);
        this.configureSessionAuthenticator();
    };
    /**
     * In case of CouchdbSessionAuthenticator
     * the service options should be applied on it.
     */
    CloudantBaseService.prototype.configureSessionAuthenticator = function () {
        var auth = this.getAuthenticator();
        if (auth instanceof auth_1.CouchdbSessionAuthenticator) {
            var serviceClass = this.constructor;
            var newHeaders = common_1.getSdkHeaders(serviceClass.DEFAULT_SERVICE_NAME, 'v1', 'authenticatorPostSession');
            if (this.baseOptions.headers === undefined) {
                Object.assign(this.baseOptions, { 'headers': newHeaders });
            }
            else {
                Object.assign(this.baseOptions.headers, newHeaders);
            }
            auth.configure(this.baseOptions);
        }
    };
    return CloudantBaseService;
}(ibm_cloud_sdk_core_1.BaseService));
exports.CloudantBaseService = CloudantBaseService;
//# sourceMappingURL=cloudantBaseService.js.map