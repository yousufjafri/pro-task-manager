"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 3.30.0-bd714324-20210406-200538
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
var cloudantBaseService_1 = require("../lib/cloudantBaseService");
var getAuthenticatorFromEnvCloudantExtension_1 = require("../lib/getAuthenticatorFromEnvCloudantExtension");
/**
 * NoSQL database based on Apache CouchDB
 */
var CloudantV1 = /** @class */ (function (_super) {
    __extends(CloudantV1, _super);
    /**
     * Construct a CloudantV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {CloudantV1}
     */
    function CloudantV1(options) {
        var _this = this;
        options = options || {};
        // enable gzip compression of request bodies
        options.enableGzipCompression = true;
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(CloudantV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of CloudantV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {CloudantV1}
     */
    CloudantV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = getAuthenticatorFromEnvCloudantExtension_1.getAuthenticatorFromEnvCloudantExtension(options.serviceName);
        }
        var service = new CloudantV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * server
     ************************/
    /**
     * Retrieve server instance information.
     *
     * When you access the root of an instance, IBM Cloudant returns meta-information about the instance. The response
     * includes a JSON structure that contains information about the server, including a welcome message and the server's
     * version.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ServerInformation>>}
     */
    CloudantV1.prototype.getServerInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getServerInformation');
        var parameters = {
            options: {
                url: '/',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve cluster membership information.
     *
     * Displays the nodes that are part of the cluster as `cluster_nodes`. The field, `all_nodes`, displays all nodes this
     * node knows about, including the ones that are part of the cluster. This endpoint is useful when you set up a
     * cluster.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.MembershipInformation>>}
     */
    CloudantV1.prototype.getMembershipInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getMembershipInformation');
        var parameters = {
            options: {
                url: '/_membership',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve one or more UUIDs.
     *
     * Requests one or more Universally Unique Identifiers (UUIDs) from the instance. The response is a JSON object that
     * provides a list of UUIDs.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.count] - Query parameter to specify the number of UUIDs to return.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.UuidsResult>>}
     */
    CloudantV1.prototype.getUuids = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'count': _params.count
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getUuids');
        var parameters = {
            options: {
                url: '/_uuids',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve provisioned throughput capacity information.
     *
     * View the amount of provisioned throughput capacity that is allocated to an IBM Cloudant instance and what is the
     * target provisioned throughput capacity.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CapacityThroughputInformation>>}
     */
    CloudantV1.prototype.getCapacityThroughputInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getCapacityThroughputInformation');
        var parameters = {
            options: {
                url: '/_api/v2/user/capacity/throughput',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update the target provisioned throughput capacity.
     *
     * Sets the target provisioned throughput capacity for an IBM Cloudant instance. When target capacity is changed, the
     * current capacity asynchronously changes to meet the target capacity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {number} params.blocks - A number of blocks of throughput units. A block consists of 100 reads/sec, 50
     * writes/sec, and 5 global queries/sec of provisioned throughput capacity.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CapacityThroughputInformation>>}
     */
    CloudantV1.prototype.putCapacityThroughputConfiguration = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['blocks'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'blocks': _params.blocks
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putCapacityThroughputConfiguration');
        var parameters = {
            options: {
                url: '/_api/v2/user/capacity/throughput',
                method: 'PUT',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * changes
     ************************/
    /**
     * Retrieve change events for all databases.
     *
     * Lists changes to databases, like a global changes feed. Types of changes include updating the database and creating
     * or deleting a database. Like the changes feed, the feed is not guaranteed to return changes in the correct order
     * and might repeat changes. Polling modes for this method work like polling modes for the changes feed.
     * **Note: This endpoint requires _admin or _db_updates role and is only available on dedicated clusters.**.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.feed] - Query parameter to specify the changes feed type.
     * @param {number} [params.heartbeat] - Query parameter to specify the period in milliseconds after which an empty
     * line is sent in the results. Only applicable for longpoll, continuous, and eventsource feeds. Overrides any timeout
     * to keep the feed alive indefinitely. May also be `true` to use default value of 60000.
     * @param {number} [params.timeout] - Query parameter to specify the maximum period in milliseconds to wait for a
     * change before the response is sent, even if there are no results. Only applicable for `longpoll` or `continuous`
     * feeds. Default value is specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also
     * the default maximum timeout to prevent undetected dead connections.
     * @param {string} [params.since] - Query parameter to specify to start the results from the change immediately after
     * the given update sequence. Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DbUpdates>>}
     */
    CloudantV1.prototype.getDbUpdates = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'feed': _params.feed,
            'heartbeat': _params.heartbeat,
            'timeout': _params.timeout,
            'since': _params.since
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDbUpdates');
        var parameters = {
            options: {
                url: '/_db_updates',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query the database document changes feed.
     *
     * Requests the database changes feed in the same way as `GET /{db}/_changes` does. It is widely used with the
     * `filter` query parameter because it allows one to pass more information to the filter.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string[]} [params.docIds] - Schema for a list of document IDs.
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {JsonObject} [params.selector] - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.lastEventId] - Header parameter to specify the ID of the last events received by the server
     * on a previous connection. Overrides `since` query parameter.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Query parameter to specify whether to return the documents in descending by
     * key order.
     * @param {string} [params.feed] - Query parameter to specify the changes feed type.
     * @param {string} [params.filter] - Query parameter to specify a filter function from a design document that will
     * filter the changes stream emitting only filtered events. Additionally, several built-in filters are available:
     * - `_design`
     * - Returns only changes to design documents.
     * - `_doc_ids`
     * - Returns changes for documents whit an ID matching one specified in `doc_ids` request body parameter.
     * - `_selector`
     * - Returns changes for documents that match the `selector` request body parameter. The selector syntax is the same
     * as used for `_find`.
     * - `_view`
     * - Returns changes for documents that match an existing map function in the view specified by the query parameter
     * `view`.
     * @param {number} [params.heartbeat] - Query parameter to specify the period in milliseconds after which an empty
     * line is sent in the results. Only applicable for longpoll, continuous, and eventsource feeds. Overrides any timeout
     * to keep the feed alive indefinitely. May also be `true` to use default value of 60000.
     * @param {boolean} [params.includeDocs] - Query parameter to specify whether to include the full content of the
     * documents in the response.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.seqInterval] - Query parameter to specify that the update seq should only be calculated
     * with every Nth result returned. When fetching changes in a batch, setting <code>seq_interval=&lt;batch
     * size&gt;</code>, where &lt;batch size&gt; is the number of results requested per batch, load can be reduced on the
     * source database as computing the seq value across many shards (especially in highly-sharded databases) is
     * expensive.
     * @param {string} [params.since] - Query parameter to specify to start the results from the change immediately after
     * the given update sequence. Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
     * @param {string} [params.style] - Query parameter to specify how many revisions are returned in the changes array.
     * The default, `main_only`, will only return the current "winning" revision; all_docs will return all leaf revisions
     * (including conflicts and deleted former conflicts).
     * @param {number} [params.timeout] - Query parameter to specify the maximum period in milliseconds to wait for a
     * change before the response is sent, even if there are no results. Only applicable for `longpoll` or `continuous`
     * feeds. Default value is specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also
     * the default maximum timeout to prevent undetected dead connections.
     * @param {string} [params.view] - Query parameter to specify a view function as a filter. Documents pass the filter
     * if the view's map function emits at least one record for them.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ChangesResult>>}
     */
    CloudantV1.prototype.postChanges = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'doc_ids': _params.docIds,
            'fields': _params.fields,
            'selector': _params.selector
        };
        var query = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'feed': _params.feed,
            'filter': _params.filter,
            'heartbeat': _params.heartbeat,
            'include_docs': _params.includeDocs,
            'limit': _params.limit,
            'seq_interval': _params.seqInterval,
            'since': _params.since,
            'style': _params.style,
            'timeout': _params.timeout,
            'view': _params.view
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postChanges');
        var parameters = {
            options: {
                url: '/{db}/_changes',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Last-Event-ID': _params.lastEventId
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query the database document changes feed as stream.
     *
     * Requests the database changes feed in the same way as `GET /{db}/_changes` does. It is widely used with the
     * `filter` query parameter because it allows one to pass more information to the filter.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string[]} [params.docIds] - Schema for a list of document IDs.
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {JsonObject} [params.selector] - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.lastEventId] - Header parameter to specify the ID of the last events received by the server
     * on a previous connection. Overrides `since` query parameter.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Query parameter to specify whether to return the documents in descending by
     * key order.
     * @param {string} [params.feed] - Query parameter to specify the changes feed type.
     * @param {string} [params.filter] - Query parameter to specify a filter function from a design document that will
     * filter the changes stream emitting only filtered events. Additionally, several built-in filters are available:
     * - `_design`
     * - Returns only changes to design documents.
     * - `_doc_ids`
     * - Returns changes for documents whit an ID matching one specified in `doc_ids` request body parameter.
     * - `_selector`
     * - Returns changes for documents that match the `selector` request body parameter. The selector syntax is the same
     * as used for `_find`.
     * - `_view`
     * - Returns changes for documents that match an existing map function in the view specified by the query parameter
     * `view`.
     * @param {number} [params.heartbeat] - Query parameter to specify the period in milliseconds after which an empty
     * line is sent in the results. Only applicable for longpoll, continuous, and eventsource feeds. Overrides any timeout
     * to keep the feed alive indefinitely. May also be `true` to use default value of 60000.
     * @param {boolean} [params.includeDocs] - Query parameter to specify whether to include the full content of the
     * documents in the response.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.seqInterval] - Query parameter to specify that the update seq should only be calculated
     * with every Nth result returned. When fetching changes in a batch, setting <code>seq_interval=&lt;batch
     * size&gt;</code>, where &lt;batch size&gt; is the number of results requested per batch, load can be reduced on the
     * source database as computing the seq value across many shards (especially in highly-sharded databases) is
     * expensive.
     * @param {string} [params.since] - Query parameter to specify to start the results from the change immediately after
     * the given update sequence. Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
     * @param {string} [params.style] - Query parameter to specify how many revisions are returned in the changes array.
     * The default, `main_only`, will only return the current "winning" revision; all_docs will return all leaf revisions
     * (including conflicts and deleted former conflicts).
     * @param {number} [params.timeout] - Query parameter to specify the maximum period in milliseconds to wait for a
     * change before the response is sent, even if there are no results. Only applicable for `longpoll` or `continuous`
     * feeds. Default value is specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also
     * the default maximum timeout to prevent undetected dead connections.
     * @param {string} [params.view] - Query parameter to specify a view function as a filter. Documents pass the filter
     * if the view's map function emits at least one record for them.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postChangesAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'doc_ids': _params.docIds,
            'fields': _params.fields,
            'selector': _params.selector
        };
        var query = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'feed': _params.feed,
            'filter': _params.filter,
            'heartbeat': _params.heartbeat,
            'include_docs': _params.includeDocs,
            'limit': _params.limit,
            'seq_interval': _params.seqInterval,
            'since': _params.since,
            'style': _params.style,
            'timeout': _params.timeout,
            'view': _params.view
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postChangesAsStream');
        var parameters = {
            options: {
                url: '/{db}/_changes',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Last-Event-ID': _params.lastEventId
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * databases
     ************************/
    /**
     * Retrieve the HTTP headers for a database.
     *
     * Returns the HTTP headers that contain a minimal amount of information about the specified database. Since the
     * response body is empty, using the HEAD method is a lightweight way to check if the database exists or not.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headDatabase = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headDatabase');
        var parameters = {
            options: {
                url: '/{db}',
                method: 'HEAD',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a list of all database names in the instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {boolean} [params.descending] - Query parameter to specify whether to return the documents in descending by
     * key order.
     * @param {string} [params.endkey] - Query parameter to specify to stop returning records when the specified key is
     * reached. String representation of any JSON type that matches the key type emitted by the view function.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {string} [params.startkey] - Query parameter to specify to start returning records from the specified key.
     * String representation of any JSON type that matches the key type emitted by the view function.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<string[]>>}
     */
    CloudantV1.prototype.getAllDbs = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'descending': _params.descending,
            'endkey': _params.endkey,
            'limit': _params.limit,
            'skip': _params.skip,
            'startkey': _params.startkey
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getAllDbs');
        var parameters = {
            options: {
                url: '/_all_dbs',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query information about multiple databases.
     *
     * This operation enables you to request information about multiple databases in a single request, instead of issuing
     * multiple `GET /{db}` requests. It returns a list that contains an information object for each database specified in
     * the request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.keys - A list of database names.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DbsInfoResult[]>>}
     */
    CloudantV1.prototype.postDbsInfo = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['keys'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'keys': _params.keys
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postDbsInfo');
        var parameters = {
            options: {
                url: '/_dbs_info',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete a database.
     *
     * Deletes the specified database and all documents and attachments contained within it. To avoid deleting a database,
     * the server responds with a 400 HTTP status code when the request URL includes a `?rev=` parameter. This response
     * suggests that a user wanted to delete a document but forgot to add the document ID to the URL.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.deleteDatabase = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteDatabase');
        var parameters = {
            options: {
                url: '/{db}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve information about a database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DatabaseInformation>>}
     */
    CloudantV1.prototype.getDatabaseInformation = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDatabaseInformation');
        var parameters = {
            options: {
                url: '/{db}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create a database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.partitioned] - Query parameter to specify whether to enable database partitions when
     * creating a database.
     * @param {number} [params.q] - The number of shards in the database. Each shard is a partition of the hash value
     * range. Default is 8, unless overridden in the `cluster config`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.putDatabase = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'partitioned': _params.partitioned,
            'q': _params.q
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putDatabase');
        var parameters = {
            options: {
                url: '/{db}',
                method: 'PUT',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * documents
     ************************/
    /**
     * Retrieve the HTTP headers for the document.
     *
     * This method supports the same query arguments as the `GET /{db}/{docid}` method, but only the header information
     * (including document size and the revision as an ETag) is returned. The ETag header shows the current revision for
     * the requested document, and the Content-Length specifies the length of the data if the document was requested in
     * full. Add any of the query arguments, then the resulting HTTP headers that correspond to it are returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'latest': _params.latest,
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headDocument');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'HEAD',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create or modify a document in a database.
     *
     * Creates or modifies a document in the specified database by using the supplied JSON document. If the JSON document
     * doesn't specify an `_id` field, then the document is created with a new unique ID generated by the UUID algorithm
     * that is configured for the server. If the document includes the `_id` field, then it is created with that `_id` or
     * updated if the `_id` already exists, and an appropriate `_rev` is included in the JSON document. If the `_id`
     * includes the `_local` or `_design` prefix, then this operation is used to create or modify local or design
     * documents respectively.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {Document|NodeJS.ReadableStream|Buffer} params.document - HTTP request body for Document operations.
     * @param {string} [params.contentType] - The type of the input.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.postDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'document'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.document;
        var query = {
            'batch': _params.batch
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postDocument');
        var parameters = {
            options: {
                url: '/{db}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': _params.contentType
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a list of all documents in a database.
     *
     * Queries the primary index (all document IDs). The results that match the request body parameters are returned in a
     * JSON object, including a list of matching documents with basic contents, such as the ID and revision. When no
     * request body parameters are specified, results for all documents in the database are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endkey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startkey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>}
     */
    CloudantV1.prototype.postAllDocs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'key': _params.key,
            'keys': _params.keys,
            'startkey': _params.startkey
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postAllDocs');
        var parameters = {
            options: {
                url: '/{db}/_all_docs',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a list of all documents in a database as stream.
     *
     * Queries the primary index (all document IDs). The results that match the request body parameters are returned in a
     * JSON object, including a list of matching documents with basic contents, such as the ID and revision. When no
     * request body parameters are specified, results for all documents in the database are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endkey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startkey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postAllDocsAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'key': _params.key,
            'keys': _params.keys,
            'startkey': _params.startkey
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postAllDocsAsStream');
        var parameters = {
            options: {
                url: '/{db}/_all_docs',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Multi-query the list of all documents in a database.
     *
     * Runs multiple queries using the primary index (all document IDs). Returns a JSON object that contains a list of
     * result objects, one for each query, with a structure equivalent to that of a single `_all_docs` request. This
     * enables you to request multiple queries in a single request, in place of multiple `POST /{db}/_all_docs` requests.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {AllDocsQuery[]} params.queries - An array of query objects with fields for the parameters of each
     * individual view query to be executed. The field names and their meaning are the same as the query parameters of a
     * regular `/_all_docs` request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsQueriesResult>>}
     */
    CloudantV1.prototype.postAllDocsQueries = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'queries'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'queries': _params.queries
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postAllDocsQueries');
        var parameters = {
            options: {
                url: '/{db}/_all_docs/queries',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Multi-query the list of all documents in a database as stream.
     *
     * Runs multiple queries using the primary index (all document IDs). Returns a JSON object that contains a list of
     * result objects, one for each query, with a structure equivalent to that of a single `_all_docs` request. This
     * enables you to request multiple queries in a single request, in place of multiple `POST /{db}/_all_docs` requests.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {AllDocsQuery[]} params.queries - An array of query objects with fields for the parameters of each
     * individual view query to be executed. The field names and their meaning are the same as the query parameters of a
     * regular `/_all_docs` request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postAllDocsQueriesAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'queries'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'queries': _params.queries
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postAllDocsQueriesAsStream');
        var parameters = {
            options: {
                url: '/{db}/_all_docs/queries',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Bulk modify multiple documents in a database.
     *
     * The bulk document API allows you to create and update multiple documents at the same time within a single request.
     * The basic operation is similar to creating or updating a single document, except that you batch the document
     * structure and information.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkDocs|NodeJS.ReadableStream|Buffer} params.bulkDocs - HTTP request body for postBulkDocs.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult[]>>}
     */
    CloudantV1.prototype.postBulkDocs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'bulkDocs'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.bulkDocs;
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postBulkDocs');
        var parameters = {
            options: {
                url: '/{db}/_bulk_docs',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Bulk query revision information for multiple documents.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.BulkGetResult>>}
     */
    CloudantV1.prototype.postBulkGet = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docs'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'docs': _params.docs
        };
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'latest': _params.latest,
            'revs': _params.revs
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postBulkGet');
        var parameters = {
            options: {
                url: '/{db}/_bulk_get',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Bulk query revision information for multiple documents as mixed.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postBulkGetAsMixed = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docs'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'docs': _params.docs
        };
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'latest': _params.latest,
            'revs': _params.revs
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postBulkGetAsMixed');
        var parameters = {
            options: {
                url: '/{db}/_bulk_get',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'multipart/mixed',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Bulk query revision information for multiple documents as related.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postBulkGetAsRelated = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docs'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'docs': _params.docs
        };
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'latest': _params.latest,
            'revs': _params.revs
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postBulkGetAsRelated');
        var parameters = {
            options: {
                url: '/{db}/_bulk_get',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'multipart/related',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Bulk query revision information for multiple documents as stream.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postBulkGetAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docs'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'docs': _params.docs
        };
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'latest': _params.latest,
            'revs': _params.revs
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postBulkGetAsStream');
        var parameters = {
            options: {
                url: '/{db}/_bulk_get',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete a document.
     *
     * Marks the specified document as deleted by adding a `_deleted` field with the value `true`. Documents with this
     * field are not returned within requests anymore but stay in the database. You must supply the current (latest)
     * revision, either by using the `rev` parameter or by using the `If-Match` header to specify the revision.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.deleteDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'batch': _params.batch,
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteDocument');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a document.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Document>>}
     */
    CloudantV1.prototype.getDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'conflicts': _params.conflicts,
            'deleted_conflicts': _params.deletedConflicts,
            'latest': _params.latest,
            'local_seq': _params.localSeq,
            'meta': _params.meta,
            'rev': _params.rev,
            'revs': _params.revs,
            'revs_info': _params.revsInfo
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDocument');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a document as mixed.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.getDocumentAsMixed = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'conflicts': _params.conflicts,
            'deleted_conflicts': _params.deletedConflicts,
            'latest': _params.latest,
            'local_seq': _params.localSeq,
            'meta': _params.meta,
            'rev': _params.rev,
            'revs': _params.revs,
            'revs_info': _params.revsInfo
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDocumentAsMixed');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'multipart/mixed',
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a document as related.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.getDocumentAsRelated = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'conflicts': _params.conflicts,
            'deleted_conflicts': _params.deletedConflicts,
            'latest': _params.latest,
            'local_seq': _params.localSeq,
            'meta': _params.meta,
            'rev': _params.rev,
            'revs': _params.revs,
            'revs_info': _params.revsInfo
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDocumentAsRelated');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'multipart/related',
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a document as stream.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.getDocumentAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'conflicts': _params.conflicts,
            'deleted_conflicts': _params.deletedConflicts,
            'latest': _params.latest,
            'local_seq': _params.localSeq,
            'meta': _params.meta,
            'rev': _params.rev,
            'revs': _params.revs,
            'revs_info': _params.revsInfo
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDocumentAsStream');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create or modify a document.
     *
     * The PUT method creates a new named document, or creates a new revision of the existing document. Unlike the `POST
     * /{db}` request, you must specify the document ID in the request URL.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {Document|NodeJS.ReadableStream|Buffer} params.document - HTTP request body for Document operations.
     * @param {string} [params.contentType] - The type of the input.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {boolean} [params.newEdits] - Query parameter to specify whether to prevent insertion of conflicting
     * document revisions. If false, a well-formed _rev must be included in the document. False is used by the replicator
     * to insert documents into the target database even if that leads to the creation of conflicts.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.putDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId', 'document'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.document;
        var query = {
            'batch': _params.batch,
            'new_edits': _params.newEdits,
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putDocument');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': _params.contentType,
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * designDocuments
     ************************/
    /**
     * Retrieve the HTTP headers for a design document.
     *
     * This method supports the same query arguments as the `GET /{db}/_design/{ddoc}` method, but the results include
     * only the header information (including design document size, and the revision as an ETag). The ETag header shows
     * the current revision for the requested design document, and if you requested the design document in full, the
     * Content-Length specifies the length of the data. If you add any of the query arguments, then the resulting HTTP
     * headers correspond to what is returned for the equivalent GET request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headDesignDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headDesignDocument');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}',
                method: 'HEAD',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete a design document.
     *
     * Marks the specified design document as deleted by adding a `_deleted` field with the value `true`. Documents with
     * this field are not returned with requests but stay in the database. You must supply the current (latest) revision,
     * either by using the `rev` parameter or by using the `If-Match` header to specify the revision.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.deleteDesignDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'batch': _params.batch,
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteDesignDocument');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a design document.
     *
     * Returns design document with the specified `doc_id` from the specified database. Unless you request a specific
     * revision, the current revision of the design document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DesignDocument>>}
     */
    CloudantV1.prototype.getDesignDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'conflicts': _params.conflicts,
            'deleted_conflicts': _params.deletedConflicts,
            'latest': _params.latest,
            'local_seq': _params.localSeq,
            'meta': _params.meta,
            'rev': _params.rev,
            'revs': _params.revs,
            'revs_info': _params.revsInfo
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDesignDocument');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create or modify a design document.
     *
     * The PUT method creates a new named design document, or creates a new revision of the existing design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {DesignDocument} params.designDocument - HTTP request body for DesignDocument operations.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {boolean} [params.newEdits] - Query parameter to specify whether to prevent insertion of conflicting
     * document revisions. If false, a well-formed _rev must be included in the document. False is used by the replicator
     * to insert documents into the target database even if that leads to the creation of conflicts.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.putDesignDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'designDocument'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.designDocument;
        var query = {
            'batch': _params.batch,
            'new_edits': _params.newEdits,
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putDesignDocument');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve information about a design document.
     *
     * Retrieves information about the specified design document, including the index, index size, and current status of
     * the design document and associated index information.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DesignDocumentInformation>>}
     */
    CloudantV1.prototype.getDesignDocumentInformation = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDesignDocumentInformation');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_info',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a list of all design documents in a database.
     *
     * Queries the index of all design document IDs. The results matching the request body parameters are returned in a
     * JSON object, including a list of matching design documents with basic contents, such as the ID and revision. When
     * no request body parameters are specified, results for all design documents in the database are returned.
     * Optionally, the design document content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endkey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startkey] - Schema for a document ID.
     * @param {string} [params.accept] - The type of the response: application/json or application/octet-stream.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>}
     */
    CloudantV1.prototype.postDesignDocs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'key': _params.key,
            'keys': _params.keys,
            'startkey': _params.startkey
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postDesignDocs');
        var parameters = {
            options: {
                url: '/{db}/_design_docs',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'Accept': _params.accept
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Multi-query the list of all design documents.
     *
     * This operation runs multiple view queries of all design documents in the database. This operation enables you to
     * request numerous queries in a single request, in place of multiple POST `/{db}/_design_docs` requests.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {AllDocsQuery[]} params.queries - An array of query objects with fields for the parameters of each
     * individual view query to be executed. The field names and their meaning are the same as the query parameters of a
     * regular `/_all_docs` request.
     * @param {string} [params.accept] - The type of the response: application/json or application/octet-stream.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsQueriesResult>>}
     */
    CloudantV1.prototype.postDesignDocsQueries = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'queries'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'queries': _params.queries
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postDesignDocsQueries');
        var parameters = {
            options: {
                url: '/{db}/_design_docs/queries',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'Accept': _params.accept
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * views
     ************************/
    /**
     * Query a MapReduce view.
     *
     * This operation queries the specified MapReduce view of the specified design document. By default, the map and
     * reduce functions of the view are run to update the view before returning the response. The advantage of using the
     * HTTP `POST` method is that the query is submitted as a JSON object in the request body. This avoids the limitations
     * of passing query options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endkey] - Schema for any JSON type.
     * @param {string} [params.endkeyDocid] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group the results using the reduce function to a
     * group rather than a single row. Implies reduce is true and the maximum group_level.
     * @param {number} [params.groupLevel] - Parameter to specify the group level to be used. Implies group is true.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify to return only documents that match the specified keys. String
     * representation of a JSON array containing elements that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {boolean} [params.stable] - Parameter to specify whether view results should be returned from a stable set
     * of shards.
     * @param {any} [params.startkey] - Schema for any JSON type.
     * @param {string} [params.startkeyDocid] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ViewResult>>}
     */
    CloudantV1.prototype.postView = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'view'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'endkey_docid': _params.endkeyDocid,
            'group': _params.group,
            'group_level': _params.groupLevel,
            'key': _params.key,
            'keys': _params.keys,
            'reduce': _params.reduce,
            'stable': _params.stable,
            'startkey': _params.startkey,
            'startkey_docid': _params.startkeyDocid,
            'update': _params.update
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'view': _params.view
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postView');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_view/{view}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a MapReduce view as stream.
     *
     * This operation queries the specified MapReduce view of the specified design document. By default, the map and
     * reduce functions of the view are run to update the view before returning the response. The advantage of using the
     * HTTP `POST` method is that the query is submitted as a JSON object in the request body. This avoids the limitations
     * of passing query options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endkey] - Schema for any JSON type.
     * @param {string} [params.endkeyDocid] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group the results using the reduce function to a
     * group rather than a single row. Implies reduce is true and the maximum group_level.
     * @param {number} [params.groupLevel] - Parameter to specify the group level to be used. Implies group is true.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify to return only documents that match the specified keys. String
     * representation of a JSON array containing elements that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {boolean} [params.stable] - Parameter to specify whether view results should be returned from a stable set
     * of shards.
     * @param {any} [params.startkey] - Schema for any JSON type.
     * @param {string} [params.startkeyDocid] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postViewAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'view'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'endkey_docid': _params.endkeyDocid,
            'group': _params.group,
            'group_level': _params.groupLevel,
            'key': _params.key,
            'keys': _params.keys,
            'reduce': _params.reduce,
            'stable': _params.stable,
            'startkey': _params.startkey,
            'startkey_docid': _params.startkeyDocid,
            'update': _params.update
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'view': _params.view
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postViewAsStream');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_view/{view}',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Multi-query a MapReduce view.
     *
     * This operation runs multiple specified view queries against the view function from the specified design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {ViewQuery[]} params.queries - An array of query objects with fields for the parameters of each individual
     * view query to be executed. The field names and their meaning are the same as the query parameters of a regular view
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ViewQueriesResult>>}
     */
    CloudantV1.prototype.postViewQueries = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'view', 'queries'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'queries': _params.queries
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'view': _params.view
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postViewQueries');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_view/{view}/queries',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Multi-query a MapReduce view as stream.
     *
     * This operation runs multiple specified view queries against the view function from the specified design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {ViewQuery[]} params.queries - An array of query objects with fields for the parameters of each individual
     * view query to be executed. The field names and their meaning are the same as the query parameters of a regular view
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postViewQueriesAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'view', 'queries'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'queries': _params.queries
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'view': _params.view
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postViewQueriesAsStream');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_view/{view}/queries',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * partitionedDatabases
     ************************/
    /**
     * Retrieve information about a database partition.
     *
     * Given a partition key, return the database name, sizes, partition, doc count, and doc delete count.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.PartitionInformation>>}
     */
    CloudantV1.prototype.getPartitionInformation = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getPartitionInformation');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a list of all documents in a database partition.
     *
     * Queries the primary index (all document IDs). The results that match the query parameters are returned in a JSON
     * object, including a list of matching documents with basic contents, such as the ID and revision. When no query
     * parameters are specified, results for all documents in the database partition are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endkey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startkey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>}
     */
    CloudantV1.prototype.postPartitionAllDocs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'key': _params.key,
            'keys': _params.keys,
            'startkey': _params.startkey
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionAllDocs');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_all_docs',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a list of all documents in a database partition as stream.
     *
     * Queries the primary index (all document IDs). The results that match the query parameters are returned in a JSON
     * object, including a list of matching documents with basic contents, such as the ID and revision. When no query
     * parameters are specified, results for all documents in the database partition are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endkey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startkey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postPartitionAllDocsAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'key': _params.key,
            'keys': _params.keys,
            'startkey': _params.startkey
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionAllDocsAsStream');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_all_docs',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a database partition search index.
     *
     * Partitioned Search indexes, which are defined in design documents, allow partition databases to be queried by using
     * Lucene Query Parser Syntax. Search indexes are defined by an index function, similar to a map function in MapReduce
     * views. The index function decides what data to index and store in the index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchResult>>}
     */
    CloudantV1.prototype.postPartitionSearch = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey', 'ddoc', 'index', 'query'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'query': _params.query,
            'bookmark': _params.bookmark,
            'highlight_fields': _params.highlightFields,
            'highlight_number': _params.highlightNumber,
            'highlight_post_tag': _params.highlightPostTag,
            'highlight_pre_tag': _params.highlightPreTag,
            'highlight_size': _params.highlightSize,
            'include_docs': _params.includeDocs,
            'include_fields': _params.includeFields,
            'limit': _params.limit,
            'sort': _params.sort,
            'stale': _params.stale
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionSearch');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_design/{ddoc}/_search/{index}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a database partition search index as stream.
     *
     * Partitioned Search indexes, which are defined in design documents, allow partition databases to be queried by using
     * Lucene Query Parser Syntax. Search indexes are defined by an index function, similar to a map function in MapReduce
     * views. The index function decides what data to index and store in the index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postPartitionSearchAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey', 'ddoc', 'index', 'query'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'query': _params.query,
            'bookmark': _params.bookmark,
            'highlight_fields': _params.highlightFields,
            'highlight_number': _params.highlightNumber,
            'highlight_post_tag': _params.highlightPostTag,
            'highlight_pre_tag': _params.highlightPreTag,
            'highlight_size': _params.highlightSize,
            'include_docs': _params.includeDocs,
            'include_fields': _params.includeFields,
            'limit': _params.limit,
            'sort': _params.sort,
            'stale': _params.stale
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionSearchAsStream');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_design/{ddoc}/_search/{index}',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a database partition MapReduce view function.
     *
     * Runs the specified view function from the specified design document. Unlike `GET /{db}/_design/{ddoc}/_view/{view}`
     * for accessing views, the POST method supports the specification of explicit keys to be retrieved from the view
     * results. The remainder of the POST view functionality is identical to the `GET /{db}/_design/{ddoc}/_view/{view}`
     * API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endkey] - Schema for any JSON type.
     * @param {string} [params.endkeyDocid] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group the results using the reduce function to a
     * group rather than a single row. Implies reduce is true and the maximum group_level.
     * @param {number} [params.groupLevel] - Parameter to specify the group level to be used. Implies group is true.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify to return only documents that match the specified keys. String
     * representation of a JSON array containing elements that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {boolean} [params.stable] - Parameter to specify whether view results should be returned from a stable set
     * of shards.
     * @param {any} [params.startkey] - Schema for any JSON type.
     * @param {string} [params.startkeyDocid] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ViewResult>>}
     */
    CloudantV1.prototype.postPartitionView = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey', 'ddoc', 'view'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'endkey_docid': _params.endkeyDocid,
            'group': _params.group,
            'group_level': _params.groupLevel,
            'key': _params.key,
            'keys': _params.keys,
            'reduce': _params.reduce,
            'stable': _params.stable,
            'startkey': _params.startkey,
            'startkey_docid': _params.startkeyDocid,
            'update': _params.update
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey,
            'ddoc': _params.ddoc,
            'view': _params.view
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionView');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_design/{ddoc}/_view/{view}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a database partition MapReduce view function as stream.
     *
     * Runs the specified view function from the specified design document. Unlike `GET /{db}/_design/{ddoc}/_view/{view}`
     * for accessing views, the POST method supports the specification of explicit keys to be retrieved from the view
     * results. The remainder of the POST view functionality is identical to the `GET /{db}/_design/{ddoc}/_view/{view}`
     * API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in the
     * `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endkey] - Schema for any JSON type.
     * @param {string} [params.endkeyDocid] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group the results using the reduce function to a
     * group rather than a single row. Implies reduce is true and the maximum group_level.
     * @param {number} [params.groupLevel] - Parameter to specify the group level to be used. Implies group is true.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify to return only documents that match the specified keys. String
     * representation of a JSON array containing elements that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {boolean} [params.stable] - Parameter to specify whether view results should be returned from a stable set
     * of shards.
     * @param {any} [params.startkey] - Schema for any JSON type.
     * @param {string} [params.startkeyDocid] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postPartitionViewAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey', 'ddoc', 'view'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'att_encoding_info': _params.attEncodingInfo,
            'attachments': _params.attachments,
            'conflicts': _params.conflicts,
            'descending': _params.descending,
            'include_docs': _params.includeDocs,
            'inclusive_end': _params.inclusiveEnd,
            'limit': _params.limit,
            'skip': _params.skip,
            'update_seq': _params.updateSeq,
            'endkey': _params.endkey,
            'endkey_docid': _params.endkeyDocid,
            'group': _params.group,
            'group_level': _params.groupLevel,
            'key': _params.key,
            'keys': _params.keys,
            'reduce': _params.reduce,
            'stable': _params.stable,
            'startkey': _params.startkey,
            'startkey_docid': _params.startkeyDocid,
            'update': _params.update
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey,
            'ddoc': _params.ddoc,
            'view': _params.view
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionViewAsStream');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_design/{ddoc}/_view/{view}',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a database partition index by using selector syntax (POST).
     *
     * Query documents by using a declarative JSON querying syntax. Queries can use the built-in `_all_docs` index or
     * custom indices, specified by using the `_index` endpoint.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - JSON array of sort syntax elements to determine the sort order of the
     * results.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.FindResult>>}
     */
    CloudantV1.prototype.postPartitionFind = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey', 'selector'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'selector': _params.selector,
            'bookmark': _params.bookmark,
            'conflicts': _params.conflicts,
            'execution_stats': _params.executionStats,
            'fields': _params.fields,
            'limit': _params.limit,
            'skip': _params.skip,
            'sort': _params.sort,
            'stable': _params.stable,
            'update': _params.update,
            'use_index': _params.useIndex
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionFind');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_find',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a database partition index by using selector syntax (POST) as stream.
     *
     * Query documents by using a declarative JSON querying syntax. Queries can use the built-in `_all_docs` index or
     * custom indices, specified by using the `_index` endpoint.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - JSON array of sort syntax elements to determine the sort order of the
     * results.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postPartitionFindAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'partitionKey', 'selector'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'selector': _params.selector,
            'bookmark': _params.bookmark,
            'conflicts': _params.conflicts,
            'execution_stats': _params.executionStats,
            'fields': _params.fields,
            'limit': _params.limit,
            'skip': _params.skip,
            'sort': _params.sort,
            'stable': _params.stable,
            'update': _params.update,
            'use_index': _params.useIndex
        };
        var path = {
            'db': _params.db,
            'partition_key': _params.partitionKey
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postPartitionFindAsStream');
        var parameters = {
            options: {
                url: '/{db}/_partition/{partition_key}/_find',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * queries
     ************************/
    /**
     * Retrieve information about which index is used for a query.
     *
     * Shows which index is being used by the query. Parameters are the same as the [`_find`
     * endpoint](#query-an-index-by-using-selector-syntax).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - JSON array of sort syntax elements to determine the sort order of the
     * results.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {number} [params.r] - The read quorum that is needed for the result. The value defaults to 1, in which case
     * the document that was found in the index is returned. If set to a higher value, each document is read from at least
     * that many replicas before it is returned in the results. The request will take more time than using only the
     * document that is stored locally with the index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ExplainResult>>}
     */
    CloudantV1.prototype.postExplain = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'selector'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'selector': _params.selector,
            'bookmark': _params.bookmark,
            'conflicts': _params.conflicts,
            'execution_stats': _params.executionStats,
            'fields': _params.fields,
            'limit': _params.limit,
            'skip': _params.skip,
            'sort': _params.sort,
            'stable': _params.stable,
            'update': _params.update,
            'use_index': _params.useIndex,
            'r': _params.r
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postExplain');
        var parameters = {
            options: {
                url: '/{db}/_explain',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query an index by using selector syntax.
     *
     * Query documents by using a declarative JSON querying syntax. Queries can use the built-in `_all_docs` index or
     * custom indices, specified by using the `_index` endpoint.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - JSON array of sort syntax elements to determine the sort order of the
     * results.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {number} [params.r] - The read quorum that is needed for the result. The value defaults to 1, in which case
     * the document that was found in the index is returned. If set to a higher value, each document is read from at least
     * that many replicas before it is returned in the results. The request will take more time than using only the
     * document that is stored locally with the index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.FindResult>>}
     */
    CloudantV1.prototype.postFind = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'selector'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'selector': _params.selector,
            'bookmark': _params.bookmark,
            'conflicts': _params.conflicts,
            'execution_stats': _params.executionStats,
            'fields': _params.fields,
            'limit': _params.limit,
            'skip': _params.skip,
            'sort': _params.sort,
            'stable': _params.stable,
            'update': _params.update,
            'use_index': _params.useIndex,
            'r': _params.r
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postFind');
        var parameters = {
            options: {
                url: '/{db}/_find',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query an index by using selector syntax as stream.
     *
     * Query documents by using a declarative JSON querying syntax. Queries can use the built-in `_all_docs` index or
     * custom indices, specified by using the `_index` endpoint.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. In addition
     * to the common boolean operators (`$and`, `$or`, `$not`, `$nor`) there are three combination operators: `$all`,
     * `$elemMatch`, and `$allMatch`. A combination operator takes a single argument. The argument is either another
     * selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - JSON array of sort syntax elements to determine the sort order of the
     * results.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {number} [params.r] - The read quorum that is needed for the result. The value defaults to 1, in which case
     * the document that was found in the index is returned. If set to a higher value, each document is read from at least
     * that many replicas before it is returned in the results. The request will take more time than using only the
     * document that is stored locally with the index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postFindAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'selector'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'selector': _params.selector,
            'bookmark': _params.bookmark,
            'conflicts': _params.conflicts,
            'execution_stats': _params.executionStats,
            'fields': _params.fields,
            'limit': _params.limit,
            'skip': _params.skip,
            'sort': _params.sort,
            'stable': _params.stable,
            'update': _params.update,
            'use_index': _params.useIndex,
            'r': _params.r
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postFindAsStream');
        var parameters = {
            options: {
                url: '/{db}/_find',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve information about all indexes.
     *
     * When you make a GET request to `/db/_index`, you get a list of all indexes used by Cloudant Query in the database,
     * including the primary index. In addition to the information available through this API, indexes are also stored in
     * the `indexes` property of design documents.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.IndexesInformation>>}
     */
    CloudantV1.prototype.getIndexesInformation = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getIndexesInformation');
        var parameters = {
            options: {
                url: '/{db}/_index',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create a new index on a database.
     *
     * Create a new index on a database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {IndexDefinition} params.index - Schema for a `json` or `text` query index definition. Indexes of type
     * `text` have additional configuration properties that do not apply to `json` indexes, these are:
     * * `default_analyzer` - the default text analyzer to use * `default_field` - whether to index the text in all
     * document fields and what analyzer to use for that purpose.
     * @param {string} [params.ddoc] - Name of the design document in which the index will be created.
     * @param {IndexDefinition} [params.def] - Schema for a `json` or `text` query index definition. Indexes of type
     * `text` have additional configuration properties that do not apply to `json` indexes, these are:
     * * `default_analyzer` - the default text analyzer to use * `default_field` - whether to index the text in all
     * document fields and what analyzer to use for that purpose.
     * @param {string} [params.name] - name.
     * @param {boolean} [params.partitioned] - The default value is `true` for databases with `partitioned: true` and
     * `false` otherwise. For databases with `partitioned: false` if this option is specified the value must be `false`.
     * @param {string} [params.type] - Schema for the type of an index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.IndexResult>>}
     */
    CloudantV1.prototype.postIndex = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'index'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'index': _params.index,
            'ddoc': _params.ddoc,
            'def': _params.def,
            'name': _params.name,
            'partitioned': _params.partitioned,
            'type': _params.type
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postIndex');
        var parameters = {
            options: {
                url: '/{db}/_index',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete an index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.type - Path parameter to specify the index type.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.deleteIndex = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'type', 'index'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'type': _params.type,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteIndex');
        var parameters = {
            options: {
                url: '/{db}/_index/_design/{ddoc}/{type}/{index}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * searches
     ************************/
    /**
     * Query tokenization of sample text.
     *
     * Returns the results of analyzer tokenization of the provided sample text. This endpoint can be used for testing
     * analyzer tokenization.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.analyzer - The analyzer type that is being used at the tokenization.
     * @param {string} params.text - The text to tokenize with the analyzer.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchAnalyzeResult>>}
     */
    CloudantV1.prototype.postSearchAnalyze = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['analyzer', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'analyzer': _params.analyzer,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postSearchAnalyze');
        var parameters = {
            options: {
                url: '/_search_analyze',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a search index.
     *
     * Search indexes, which are defined in design documents, allow databases to be queried by using Lucene Query Parser
     * Syntax. An index function defines a search index, similar to a map function in MapReduce views. The index function
     * decides what data to index and what data to store in the index. The advantage of using the HTTP `POST` method is
     * that the query is submitted as a JSON object in the request body. This avoids the limitations of passing query
     * options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {string[]} [params.counts] - This field defines an array of names of string fields, for which counts are
     * requested. The response contains counts for each unique value of this field name among the documents that match the
     * search query. Faceting must be enabled for this parameter to function. This option is only available when making
     * global queries.
     * @param {string[][]} [params.drilldown] - Restrict results to documents with a dimension equal to the specified
     * label(s). The search matches only documents containing the value that was provided in the named field. It differs
     * from using "fieldname:value" in the q parameter only in that the values are not analyzed. Faceting must be enabled
     * for this parameter to function.
     * @param {string} [params.groupField] - Field by which to group search matches. A string that contains the name of a
     * string field. Fields containing other data such as numbers, objects, or arrays cannot be used. This option is only
     * available when making global queries.
     * @param {number} [params.groupLimit] - Maximum group count. This field can be used only if group_field is specified.
     * This option is only available when making global queries.
     * @param {string[]} [params.groupSort] - This field defines the order of the groups in a search that uses
     * group_field. The default sort order is relevance. This field can have the same values as the sort field, so single
     * fields and arrays of fields are supported. This option is only available when making global queries.
     * @param {JsonObject} [params.ranges] - This field defines ranges for faceted, numeric search fields. The value is a
     * JSON object where the fields names are faceted numeric search fields, and the values of the fields are JSON
     * objects. The field names of the JSON objects are names for ranges. The values are strings that describe the range,
     * for example "[0 TO 10]". This option is only available when making global queries.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchResult>>}
     */
    CloudantV1.prototype.postSearch = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'index', 'query'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'query': _params.query,
            'bookmark': _params.bookmark,
            'highlight_fields': _params.highlightFields,
            'highlight_number': _params.highlightNumber,
            'highlight_post_tag': _params.highlightPostTag,
            'highlight_pre_tag': _params.highlightPreTag,
            'highlight_size': _params.highlightSize,
            'include_docs': _params.includeDocs,
            'include_fields': _params.includeFields,
            'limit': _params.limit,
            'sort': _params.sort,
            'stale': _params.stale,
            'counts': _params.counts,
            'drilldown': _params.drilldown,
            'group_field': _params.groupField,
            'group_limit': _params.groupLimit,
            'group_sort': _params.groupSort,
            'ranges': _params.ranges
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postSearch');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_search/{index}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a search index as stream.
     *
     * Search indexes, which are defined in design documents, allow databases to be queried by using Lucene Query Parser
     * Syntax. An index function defines a search index, similar to a map function in MapReduce views. The index function
     * decides what data to index and what data to store in the index. The advantage of using the HTTP `POST` method is
     * that the query is submitted as a JSON object in the request body. This avoids the limitations of passing query
     * options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {string[]} [params.counts] - This field defines an array of names of string fields, for which counts are
     * requested. The response contains counts for each unique value of this field name among the documents that match the
     * search query. Faceting must be enabled for this parameter to function. This option is only available when making
     * global queries.
     * @param {string[][]} [params.drilldown] - Restrict results to documents with a dimension equal to the specified
     * label(s). The search matches only documents containing the value that was provided in the named field. It differs
     * from using "fieldname:value" in the q parameter only in that the values are not analyzed. Faceting must be enabled
     * for this parameter to function.
     * @param {string} [params.groupField] - Field by which to group search matches. A string that contains the name of a
     * string field. Fields containing other data such as numbers, objects, or arrays cannot be used. This option is only
     * available when making global queries.
     * @param {number} [params.groupLimit] - Maximum group count. This field can be used only if group_field is specified.
     * This option is only available when making global queries.
     * @param {string[]} [params.groupSort] - This field defines the order of the groups in a search that uses
     * group_field. The default sort order is relevance. This field can have the same values as the sort field, so single
     * fields and arrays of fields are supported. This option is only available when making global queries.
     * @param {JsonObject} [params.ranges] - This field defines ranges for faceted, numeric search fields. The value is a
     * JSON object where the fields names are faceted numeric search fields, and the values of the fields are JSON
     * objects. The field names of the JSON objects are names for ranges. The values are strings that describe the range,
     * for example "[0 TO 10]". This option is only available when making global queries.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.postSearchAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'index', 'query'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'query': _params.query,
            'bookmark': _params.bookmark,
            'highlight_fields': _params.highlightFields,
            'highlight_number': _params.highlightNumber,
            'highlight_post_tag': _params.highlightPostTag,
            'highlight_pre_tag': _params.highlightPreTag,
            'highlight_size': _params.highlightSize,
            'include_docs': _params.includeDocs,
            'include_fields': _params.includeFields,
            'limit': _params.limit,
            'sort': _params.sort,
            'stale': _params.stale,
            'counts': _params.counts,
            'drilldown': _params.drilldown,
            'group_field': _params.groupField,
            'group_limit': _params.groupLimit,
            'group_sort': _params.groupSort,
            'ranges': _params.ranges
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postSearchAsStream');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_search/{index}',
                method: 'POST',
                body: body,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve information about a search index.
     *
     * Retrieve search index metadata information, such as the size of the index on disk.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchInfoResult>>}
     */
    CloudantV1.prototype.getSearchInfo = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'index'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSearchInfo');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_search_info/{index}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * geospatial
     ************************/
    /**
     * Query a geospatial index.
     *
     * Executes a query against the requested geospatial index from the specified design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} [params.bbox] - Query parameter to specify a geospatial query bounding box with two
     * latitude,longitude coordinates for the lower-left and upper-right corners. An example is
     * `-11.05987446,12.28339928,-101.05987446,62.28339928`.
     * @param {string} [params.bookmark] - Query parameter to specify a bookmark that was received from a previous
     * request. This parameter enables paging through the results. If there are no more results after the bookmark, you
     * get a response containing no further results and the same bookmark, confirming the end of the result list.
     * @param {string} [params.format] - Query parameter that causes the geospatial query output to be returned in the
     * specified format.
     * @param {string} [params.g] - Query parameter to specify a Well Known Text (WKT) representation of a geospatial
     * query geometry. The valid values for the WKT parameter include `Point`, `LineString`, `Polygon`, `MultiPoint`,
     * `MultiLineString`, `MultiPolygon`, and `GeometryCollection`.
     * @param {boolean} [params.includeDocs] - Query parameter to specify whether to include the full content of the
     * documents in the response.
     * @param {number} [params.lat] - Query parameter to specify a latitude coordinate for use with radius or ellipse
     * geospatial queries.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.lon] - Query parameter to specify a longitude coordinate for use with radius or ellipse
     * geospatial queries.
     * @param {boolean} [params.nearest] - Query parameter to specify whether to perform a nearest neighbour (NN) search.
     * If provided, the `nearest=true` search returns all results by sorting their distances to the center of the query
     * geometry. NN search can be used alone or with any of the supported DE-9IM (Dimensionally Extended nine-Intersection
     * Model) specification geometric relations documented.
     * @param {number} [params.radius] - Query parameter to specify the radius, in meters, to search from a lat,lon
     * coordinate point in a circular geospatial query.
     * @param {number} [params.rangex] - Query parameter to specify the first radius, in meters, to search from a lat,lon
     * coordinate point in an ellipse geospatial query.
     * @param {number} [params.rangey] - Query parameter to specify the second radius, in meters, to search from a lat,lon
     * coordinate point in an ellipse geospatial query.
     * @param {string} [params.relation] - Query parameter to specify the DE-9IM (Dimensionally Extended nine-Intersection
     * Model)geospatial relationship between the query geometry and the result documents.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {string} [params.stale] - Query parameter to specify to not wait for the index to finish building before
     * returning results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.GeoResult>>}
     */
    CloudantV1.prototype.getGeo = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'index'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'bbox': _params.bbox,
            'bookmark': _params.bookmark,
            'format': _params.format,
            'g': _params.g,
            'include_docs': _params.includeDocs,
            'lat': _params.lat,
            'limit': _params.limit,
            'lon': _params.lon,
            'nearest': _params.nearest,
            'radius': _params.radius,
            'rangex': _params.rangex,
            'rangey': _params.rangey,
            'relation': _params.relation,
            'skip': _params.skip,
            'stale': _params.stale
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getGeo');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_geo/{index}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query a geospatial index as stream.
     *
     * Executes a query against the requested geospatial index from the specified design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} [params.bbox] - Query parameter to specify a geospatial query bounding box with two
     * latitude,longitude coordinates for the lower-left and upper-right corners. An example is
     * `-11.05987446,12.28339928,-101.05987446,62.28339928`.
     * @param {string} [params.bookmark] - Query parameter to specify a bookmark that was received from a previous
     * request. This parameter enables paging through the results. If there are no more results after the bookmark, you
     * get a response containing no further results and the same bookmark, confirming the end of the result list.
     * @param {string} [params.format] - Query parameter that causes the geospatial query output to be returned in the
     * specified format.
     * @param {string} [params.g] - Query parameter to specify a Well Known Text (WKT) representation of a geospatial
     * query geometry. The valid values for the WKT parameter include `Point`, `LineString`, `Polygon`, `MultiPoint`,
     * `MultiLineString`, `MultiPolygon`, and `GeometryCollection`.
     * @param {boolean} [params.includeDocs] - Query parameter to specify whether to include the full content of the
     * documents in the response.
     * @param {number} [params.lat] - Query parameter to specify a latitude coordinate for use with radius or ellipse
     * geospatial queries.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.lon] - Query parameter to specify a longitude coordinate for use with radius or ellipse
     * geospatial queries.
     * @param {boolean} [params.nearest] - Query parameter to specify whether to perform a nearest neighbour (NN) search.
     * If provided, the `nearest=true` search returns all results by sorting their distances to the center of the query
     * geometry. NN search can be used alone or with any of the supported DE-9IM (Dimensionally Extended nine-Intersection
     * Model) specification geometric relations documented.
     * @param {number} [params.radius] - Query parameter to specify the radius, in meters, to search from a lat,lon
     * coordinate point in a circular geospatial query.
     * @param {number} [params.rangex] - Query parameter to specify the first radius, in meters, to search from a lat,lon
     * coordinate point in an ellipse geospatial query.
     * @param {number} [params.rangey] - Query parameter to specify the second radius, in meters, to search from a lat,lon
     * coordinate point in an ellipse geospatial query.
     * @param {string} [params.relation] - Query parameter to specify the DE-9IM (Dimensionally Extended nine-Intersection
     * Model)geospatial relationship between the query geometry and the result documents.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {string} [params.stale] - Query parameter to specify to not wait for the index to finish building before
     * returning results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.getGeoAsStream = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'index'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'bbox': _params.bbox,
            'bookmark': _params.bookmark,
            'format': _params.format,
            'g': _params.g,
            'include_docs': _params.includeDocs,
            'lat': _params.lat,
            'limit': _params.limit,
            'lon': _params.lon,
            'nearest': _params.nearest,
            'radius': _params.radius,
            'rangex': _params.rangex,
            'rangey': _params.rangey,
            'relation': _params.relation,
            'skip': _params.skip,
            'stale': _params.stale
        };
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getGeoAsStream');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_geo/{index}',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Cleanup old geospatial indexes.
     *
     * Cleanup old geospatial indexes from disk that have been superseded by newer index builds.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.postGeoCleanup = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postGeoCleanup');
        var parameters = {
            options: {
                url: '/{db}/_geo_cleanup',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve information about a geospatial index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.GeoIndexInformation>>}
     */
    CloudantV1.prototype.getGeoIndexInformation = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'ddoc', 'index'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'ddoc': _params.ddoc,
            'index': _params.index
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getGeoIndexInformation');
        var parameters = {
            options: {
                url: '/{db}/_design/{ddoc}/_geo_info/{index}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * replication
     ************************/
    /**
     * Retrieve the HTTP headers for a replication document.
     *
     * Retrieves the HTTP headers containing minimal amount of information about the specified replication document from
     * the `_replicator` database.  The method supports the same query arguments as the `GET /_replicator/{doc_id}`
     * method, but only headers like content length and the revision (ETag header) are returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headReplicationDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headReplicationDocument');
        var parameters = {
            options: {
                url: '/_replicator/{doc_id}',
                method: 'HEAD',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve HTTP headers for a replication scheduler document.
     *
     * Retrieves the HTTP headers containing minimal amount of information about the specified replication scheduler
     * document.  Since the response body is empty, using the HEAD method is a lightweight way to check if the replication
     * scheduler document exists or not.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headSchedulerDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headSchedulerDocument');
        var parameters = {
            options: {
                url: '/_scheduler/docs/_replicator/{doc_id}',
                method: 'HEAD',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve the HTTP headers for a replication scheduler job.
     *
     * Returns the HTTP headers that contain a minimal amount of information about the specified replication task. Only
     * the header information is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Path parameter to specify the replication job id.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headSchedulerJob = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['jobId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'job_id': _params.jobId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headSchedulerJob');
        var parameters = {
            options: {
                url: '/_scheduler/jobs/{job_id}',
                method: 'HEAD',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create or modify a replication operation.
     *
     * Requests, configures, or stops a replicate operation.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {ReplicationDocument} params.replicationDocument - HTTP request body for replication operations.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ReplicationResult>>}
     */
    CloudantV1.prototype.postReplicate = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['replicationDocument'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.replicationDocument;
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postReplicate');
        var parameters = {
            options: {
                url: '/_replicate',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Cancel a replication.
     *
     * Cancels a replication by deleting the document that describes it from the `_replicator` database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.deleteReplicationDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'batch': _params.batch,
            'rev': _params.rev
        };
        var path = {
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteReplicationDocument');
        var parameters = {
            options: {
                url: '/_replicator/{doc_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a replication document.
     *
     * Retrieves a replication document from the `_replicator` database to view the configuration of the replication. The
     * status of the replication is no longer recorded in the document but can be checked via the replication scheduler.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in the `_conflicts` property of the returned document. Ignored if `include_docs` isn't `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ReplicationDocument>>}
     */
    CloudantV1.prototype.getReplicationDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'conflicts': _params.conflicts,
            'deleted_conflicts': _params.deletedConflicts,
            'latest': _params.latest,
            'local_seq': _params.localSeq,
            'meta': _params.meta,
            'rev': _params.rev,
            'revs': _params.revs,
            'revs_info': _params.revsInfo
        };
        var path = {
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getReplicationDocument');
        var parameters = {
            options: {
                url: '/_replicator/{doc_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Start or update a replication.
     *
     * Creates or modifies a document in the `_replicator` database to start a new replication or to edit an existing
     * replication.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {ReplicationDocument} params.replicationDocument - HTTP request body for replication operations.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {boolean} [params.newEdits] - Query parameter to specify whether to prevent insertion of conflicting
     * document revisions. If false, a well-formed _rev must be included in the document. False is used by the replicator
     * to insert documents into the target database even if that leads to the creation of conflicts.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.putReplicationDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['docId', 'replicationDocument'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.replicationDocument;
        var query = {
            'batch': _params.batch,
            'new_edits': _params.newEdits,
            'rev': _params.rev
        };
        var path = {
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putReplicationDocument');
        var parameters = {
            options: {
                url: '/_replicator/{doc_id}',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve replication scheduler documents.
     *
     * Lists replication documents, including information about all documents, even the ones in a completed or failed
     * state. For each document, the endpoint returns the document ID, database, replication ID, source and target, and
     * other information.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {string[]} [params.states] - Query parameter to include only replication documents in the specified states.
     * String must be a comma-delimited string.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerDocsResult>>}
     */
    CloudantV1.prototype.getSchedulerDocs = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'limit': _params.limit,
            'skip': _params.skip,
            'states': _params.states
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSchedulerDocs');
        var parameters = {
            options: {
                url: '/_scheduler/docs',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a replication scheduler document.
     *
     * Retrieves information about a replication document from the replicator database. The endpoint returns the document
     * ID, database, replication ID, source and target, and other information.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerDocument>>}
     */
    CloudantV1.prototype.getSchedulerDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSchedulerDocument');
        var parameters = {
            options: {
                url: '/_scheduler/docs/_replicator/{doc_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve replication scheduler jobs.
     *
     * Retrieves information about replications that were created via `/_replicate` endpoint, as well as those created
     * from replication documents. It doesn't include replications that completed or failed to start because replication
     * documents were malformed. Each job description includes source and target information, replication ID, history of
     * recent events, and other information.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerJobsResult>>}
     */
    CloudantV1.prototype.getSchedulerJobs = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'limit': _params.limit,
            'skip': _params.skip
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSchedulerJobs');
        var parameters = {
            options: {
                url: '/_scheduler/jobs',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a replication scheduler job.
     *
     * Retrieves the state of a single replication task based on its replication ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Path parameter to specify the replication job id.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerJob>>}
     */
    CloudantV1.prototype.getSchedulerJob = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['jobId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'job_id': _params.jobId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSchedulerJob');
        var parameters = {
            options: {
                url: '/_scheduler/jobs/{job_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * authentication
     ************************/
    /**
     * Retrieve current session cookie information.
     *
     * Retrieves information about the authenticated user's session.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SessionInformation>>}
     */
    CloudantV1.prototype.getSessionInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSessionInformation');
        var parameters = {
            options: {
                url: '/_session',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * authorization
     ************************/
    /**
     * Retrieve database permissions information.
     *
     * See who has permission to read, write, and manage the database. The credentials you use to log in to the dashboard
     * automatically include `_admin` permissions to all databases you create. Everyone and everything else, including
     * users you share databases with and API keys you create, must be given a permission level explicitly.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Security>>}
     */
    CloudantV1.prototype.getSecurity = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSecurity');
        var parameters = {
            options: {
                url: '/{db}/_security',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Modify database permissions.
     *
     * Modify who has permission to read, write, or manage a database. This endpoint can be used to modify both Cloudant
     * and CouchDB related permissions. Be careful: by removing a Cloudant API key, a member or an admin from the list of
     * users that have access permissions, you remove it from the list of users that have access to the database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {SecurityObject} [params.admins] - Schema for names and roles to map to a database permission.
     * @param {SecurityObject} [params.members] - Schema for names and roles to map to a database permission.
     * @param {JsonObject} [params.cloudant] - Database permissions for Cloudant users and/or API keys.
     * @param {boolean} [params.couchdbAuthOnly] - Manage permissions using the `_users` database only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.putSecurity = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'admins': _params.admins,
            'members': _params.members,
            'cloudant': _params.cloudant,
            'couchdb_auth_only': _params.couchdbAuthOnly
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putSecurity');
        var parameters = {
            options: {
                url: '/{db}/_security',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Generates API keys for apps or persons to enable database access.
     *
     * Generates API keys to enable database access for a person or application, but without creating a new IBM Cloudant
     * account for that person or application. An API key is a randomly generated username and password. The key is given
     * the wanted access permissions for a database.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ApiKeysResult>>}
     */
    CloudantV1.prototype.postApiKeys = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postApiKeys');
        var parameters = {
            options: {
                url: '/_api/v2/api_keys',
                method: 'POST',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Modify only Cloudant related database permissions.
     *
     * Modify only Cloudant related permissions to database. Be careful: by removing an API key from the list, you remove
     * the API key from the list of users that have access to the database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.cloudant - Database permissions for Cloudant users and/or API keys.
     * @param {SecurityObject} [params.admins] - Schema for names and roles to map to a database permission.
     * @param {SecurityObject} [params.members] - Schema for names and roles to map to a database permission.
     * @param {boolean} [params.couchdbAuthOnly] - Manage permissions using the `_users` database only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.putCloudantSecurityConfiguration = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'cloudant'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'cloudant': _params.cloudant,
            'admins': _params.admins,
            'members': _params.members,
            'couchdb_auth_only': _params.couchdbAuthOnly
        };
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putCloudantSecurityConfiguration');
        var parameters = {
            options: {
                url: '/_api/v2/db/{db}/_security',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * cORS
     ************************/
    /**
     * Retrieve CORS configuration information.
     *
     * Lists all Cross-origin resource sharing (CORS) configuration. CORS defines a way in which the browser and the
     * server interact to determine whether or not to allow the request.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CorsInformation>>}
     */
    CloudantV1.prototype.getCorsInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getCorsInformation');
        var parameters = {
            options: {
                url: '/_api/v2/user/config/cors',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Modify CORS configuration.
     *
     * Sets the CORS configuration. The configuration applies to all databases and all account level endpoints in your
     * account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.origins - An array of strings that contain allowed origin domains. You have to specify the
     * full URL including the protocol. It is recommended that only the HTTPS protocol is used. Subdomains count as
     * separate domains, so you have to specify all subdomains used.
     * @param {boolean} [params.allowCredentials] - Boolean value to allow authentication credentials. If set to true,
     * browser requests must be done by using withCredentials = true.
     * @param {boolean} [params.enableCors] - Boolean value to turn CORS on and off.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.putCorsConfiguration = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['origins'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'origins': _params.origins,
            'allow_credentials': _params.allowCredentials,
            'enable_cors': _params.enableCors
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putCorsConfiguration');
        var parameters = {
            options: {
                url: '/_api/v2/user/config/cors',
                method: 'PUT',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * attachments
     ************************/
    /**
     * Retrieve the HTTP headers for an attachment.
     *
     * Returns the HTTP headers that contain a minimal amount of information about the specified attachment. This method
     * supports the same query arguments as the `GET /{db}/{doc_id}/{attachment_name}` method, but only the header
     * information (including attachment size, encoding, and the MD5 hash as an ETag), is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headAttachment = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId', 'attachmentName'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId,
            'attachment_name': _params.attachmentName
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headAttachment');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}/{attachment_name}',
                method: 'HEAD',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'If-Match': _params.ifMatch,
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete an attachment.
     *
     * Deletes the attachment with the filename, `{attachment_name}`, from the specified doc. You must supply the `rev`
     * query parameter or `If-Match` header with the current revision to delete the attachment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.deleteAttachment = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId', 'attachmentName'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'rev': _params.rev,
            'batch': _params.batch
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId,
            'attachment_name': _params.attachmentName
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAttachment');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}/{attachment_name}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve an attachment.
     *
     * Returns the file attachment that is associated with the document. The raw data of the associated attachment is
     * returned, just as if you were accessing a static file. The returned Content-Type header is the same as the content
     * type set when the document attachment was submitted to the database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {string} [params.accept] - The type of the response:  or *_/_*.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {string} [params.range] - Header parameter to specify the byte range for a request. This allows the
     * implementation of resumable downloads and skippable streams. This is available for all attachments inside CouchDB.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CloudantV1.prototype.getAttachment = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId', 'attachmentName'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId,
            'attachment_name': _params.attachmentName
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getAttachment');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}/{attachment_name}',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': _params.accept,
                    'If-Match': _params.ifMatch,
                    'If-None-Match': _params.ifNoneMatch,
                    'Range': _params.range
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create or modify an attachment.
     *
     * Uploads the supplied content as an attachment to the specified document. The attachment name that you provide must
     * be a URL encoded string. You must supply the Content-Type header, and for an existing document, you must also
     * supply either the `rev` query argument or the `If-Match` HTTP header. If you omit the revision, a new, otherwise
     * empty, document is created with the provided attachment, or a conflict occurs. If the uploaded attachment uses an
     * existing attachment name in the remote database, it updates the corresponding stored content of the database. Since
     * you must supply the revision information to add an attachment to the document, this serves as validation to update
     * the existing attachment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {NodeJS.ReadableStream|Buffer} params.attachment - HTTP request body for attachment operations.
     * @param {string} params.contentType - Content-Type of the attachment.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.putAttachment = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId', 'attachmentName', 'attachment', 'contentType'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.attachment;
        var query = {
            'rev': _params.rev
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId,
            'attachment_name': _params.attachmentName
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putAttachment');
        var parameters = {
            options: {
                url: '/{db}/{doc_id}/{attachment_name}',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': _params.contentType,
                    'If-Match': _params.ifMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * localDocuments
     ************************/
    /**
     * Retrieve HTTP headers for a local document.
     *
     * Retrieves the HTTP headers containing minimal amount of information about the specified local document. Since the
     * response body is empty, using the HEAD method is a lightweight way to check if the local document exists or not.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headLocalDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headLocalDocument');
        var parameters = {
            options: {
                url: '/{db}/_local/{doc_id}',
                method: 'HEAD',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete a local document.
     *
     * Deletes the specified local document. The semantics are identical to deleting a standard document in the specified
     * database, except that the document is not replicated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.deleteLocalDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'batch': _params.batch
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteLocalDocument');
        var parameters = {
            options: {
                url: '/{db}/_local/{doc_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a local document.
     *
     * Retrieves the specified local document. The semantics are identical to accessing a standard document in the
     * specified database, except that the document is not replicated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.accept] - The type of the response: application/json, multipart/mixed, multipart/related,
     * or application/octet-stream.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Document>>}
     */
    CloudantV1.prototype.getLocalDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'attachments': _params.attachments,
            'att_encoding_info': _params.attEncodingInfo,
            'local_seq': _params.localSeq
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getLocalDocument');
        var parameters = {
            options: {
                url: '/{db}/_local/{doc_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': _params.accept,
                    'If-None-Match': _params.ifNoneMatch
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create or modify a local document.
     *
     * Stores the specified local document. The semantics are identical to storing a standard document in the specified
     * database, except that the document is not replicated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {Document|NodeJS.ReadableStream|Buffer} params.document - HTTP request body for Document operations.
     * @param {string} [params.contentType] - The type of the input.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    CloudantV1.prototype.putLocalDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId', 'document'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.document;
        var query = {
            'batch': _params.batch
        };
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'putLocalDocument');
        var parameters = {
            options: {
                url: '/{db}/_local/{doc_id}',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': _params.contentType
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * databaseDetails
     ************************/
    /**
     * Query which document revisions are missing from the database.
     *
     * Given a list of document revisions, returns the document revisions that do not exist in the database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.documentRevisions - HTTP request body for postMissingRevs and postRevsDiff.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.MissingRevsResult>>}
     */
    CloudantV1.prototype.postMissingRevs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'documentRevisions'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.documentRevisions;
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postMissingRevs');
        var parameters = {
            options: {
                url: '/{db}/_missing_revs',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Query the document revisions and possible ancestors missing from the database.
     *
     * The replicator is the primary user of this operation. After receiving a set of new revision IDs from the source
     * database, the replicator sends this set to the destination database's `_revs_diff` to find out which of them
     * already exists there. It can then avoid fetching and sending already-known document bodies.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.documentRevisions - HTTP request body for postMissingRevs and postRevsDiff.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.JsonObject>>}
     */
    CloudantV1.prototype.postRevsDiff = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'documentRevisions'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.documentRevisions;
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postRevsDiff');
        var parameters = {
            options: {
                url: '/{db}/_revs_diff',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve shard information.
     *
     * List each shard range and the corresponding replicas for a specified database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ShardsInformation>>}
     */
    CloudantV1.prototype.getShardsInformation = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getShardsInformation');
        var parameters = {
            options: {
                url: '/{db}/_shards',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve shard information for a specific document.
     *
     * Retrieves information about a specific shard where a particular document is stored, along with information about
     * the nodes where that shard has a replica.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentShardInfo>>}
     */
    CloudantV1.prototype.getDocumentShardsInfo = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['db', 'docId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'db': _params.db,
            'doc_id': _params.docId
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDocumentShardsInfo');
        var parameters = {
            options: {
                url: '/{db}/_shards/{doc_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * monitoring
     ************************/
    /**
     * Retrieve HTTP headers about whether the server is up.
     *
     * Retrieves the HTTP headers about whether the server is up.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Empty>>}
     */
    CloudantV1.prototype.headUpInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'headUpInformation');
        var parameters = {
            options: {
                url: '/_up',
                method: 'HEAD',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve list of running tasks.
     *
     * Lists running tasks, including the task type, name, status, and process ID. The result includes a JSON array of the
     * currently running tasks, with each task described as a single object. Depending on the operation type, the set of
     * response object fields might be different.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ActiveTask[]>>}
     */
    CloudantV1.prototype.getActiveTasks = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getActiveTasks');
        var parameters = {
            options: {
                url: '/_active_tasks',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve information about whether the server is up.
     *
     * Confirms that the server is up, running, and ready to respond to requests. If `maintenance_mode` is `true` or
     * `nolb`, the endpoint returns a 404 response.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.UpInformation>>}
     */
    CloudantV1.prototype.getUpInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getUpInformation');
        var parameters = {
            options: {
                url: '/_up',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve Activity Tracker events information.
     *
     * Check event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ActivityTrackerEvents>>}
     */
    CloudantV1.prototype.getActivityTrackerEvents = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getActivityTrackerEvents');
        var parameters = {
            options: {
                url: '/_api/v2/user/activity_tracker/events',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Modify Activity Tracker events configuration.
     *
     * Configure event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.types - An array of event types that are being sent to IBM Cloud Activity Tracker for the
     * IBM Cloudant instance. "management" is a required element of this array.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    CloudantV1.prototype.postActivityTrackerEvents = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['types'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'types': _params.types
        };
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'postActivityTrackerEvents');
        var parameters = {
            options: {
                url: '/_api/v2/user/activity_tracker/events',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve the current provisioned throughput capacity consumption.
     *
     * View the current consumption of provisioned throughput capacity for an IBM Cloudant instance. The current
     * consumption shows the quantities of reads, writes, and global queries conducted against the instance for a given
     * second.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CurrentThroughputInformation>>}
     */
    CloudantV1.prototype.getCurrentThroughputInformation = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(CloudantV1.DEFAULT_SERVICE_NAME, 'v1', 'getCurrentThroughputInformation');
        var parameters = {
            options: {
                url: '/_api/v2/user/current/throughput',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    CloudantV1.DEFAULT_SERVICE_URL = 'http://localhost:5984';
    CloudantV1.DEFAULT_SERVICE_NAME = 'cloudant';
    return CloudantV1;
}(cloudantBaseService_1.CloudantBaseService));
/*************************
 * interfaces
 ************************/
(function (CloudantV1) {
    /** Constants for the `getDbUpdates` operation. */
    var GetDbUpdatesConstants;
    (function (GetDbUpdatesConstants) {
        /** Query parameter to specify the changes feed type. */
        var Feed;
        (function (Feed) {
            Feed["CONTINUOUS"] = "continuous";
            Feed["EVENTSOURCE"] = "eventsource";
            Feed["LONGPOLL"] = "longpoll";
            Feed["NORMAL"] = "normal";
        })(Feed = GetDbUpdatesConstants.Feed || (GetDbUpdatesConstants.Feed = {}));
    })(GetDbUpdatesConstants = CloudantV1.GetDbUpdatesConstants || (CloudantV1.GetDbUpdatesConstants = {}));
    /** Constants for the `postChanges` operation. */
    var PostChangesConstants;
    (function (PostChangesConstants) {
        /** Query parameter to specify the changes feed type. */
        var Feed;
        (function (Feed) {
            Feed["CONTINUOUS"] = "continuous";
            Feed["EVENTSOURCE"] = "eventsource";
            Feed["LONGPOLL"] = "longpoll";
            Feed["NORMAL"] = "normal";
        })(Feed = PostChangesConstants.Feed || (PostChangesConstants.Feed = {}));
    })(PostChangesConstants = CloudantV1.PostChangesConstants || (CloudantV1.PostChangesConstants = {}));
    /** Constants for the `postChangesAsStream` operation. */
    var PostChangesAsStreamConstants;
    (function (PostChangesAsStreamConstants) {
        /** Query parameter to specify the changes feed type. */
        var Feed;
        (function (Feed) {
            Feed["CONTINUOUS"] = "continuous";
            Feed["EVENTSOURCE"] = "eventsource";
            Feed["LONGPOLL"] = "longpoll";
            Feed["NORMAL"] = "normal";
        })(Feed = PostChangesAsStreamConstants.Feed || (PostChangesAsStreamConstants.Feed = {}));
    })(PostChangesAsStreamConstants = CloudantV1.PostChangesAsStreamConstants || (CloudantV1.PostChangesAsStreamConstants = {}));
    /** Constants for the `postDocument` operation. */
    var PostDocumentConstants;
    (function (PostDocumentConstants) {
        /** The type of the input. */
        var ContentType;
        (function (ContentType) {
            ContentType["APPLICATION_JSON"] = "application/json";
            ContentType["MULTIPART_MIXED"] = "multipart/mixed";
            ContentType["MULTIPART_RELATED"] = "multipart/related";
            ContentType["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
        })(ContentType = PostDocumentConstants.ContentType || (PostDocumentConstants.ContentType = {}));
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = PostDocumentConstants.Batch || (PostDocumentConstants.Batch = {}));
    })(PostDocumentConstants = CloudantV1.PostDocumentConstants || (CloudantV1.PostDocumentConstants = {}));
    /** Constants for the `deleteDocument` operation. */
    var DeleteDocumentConstants;
    (function (DeleteDocumentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = DeleteDocumentConstants.Batch || (DeleteDocumentConstants.Batch = {}));
    })(DeleteDocumentConstants = CloudantV1.DeleteDocumentConstants || (CloudantV1.DeleteDocumentConstants = {}));
    /** Constants for the `putDocument` operation. */
    var PutDocumentConstants;
    (function (PutDocumentConstants) {
        /** The type of the input. */
        var ContentType;
        (function (ContentType) {
            ContentType["APPLICATION_JSON"] = "application/json";
            ContentType["MULTIPART_MIXED"] = "multipart/mixed";
            ContentType["MULTIPART_RELATED"] = "multipart/related";
            ContentType["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
        })(ContentType = PutDocumentConstants.ContentType || (PutDocumentConstants.ContentType = {}));
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = PutDocumentConstants.Batch || (PutDocumentConstants.Batch = {}));
    })(PutDocumentConstants = CloudantV1.PutDocumentConstants || (CloudantV1.PutDocumentConstants = {}));
    /** Constants for the `deleteDesignDocument` operation. */
    var DeleteDesignDocumentConstants;
    (function (DeleteDesignDocumentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = DeleteDesignDocumentConstants.Batch || (DeleteDesignDocumentConstants.Batch = {}));
    })(DeleteDesignDocumentConstants = CloudantV1.DeleteDesignDocumentConstants || (CloudantV1.DeleteDesignDocumentConstants = {}));
    /** Constants for the `putDesignDocument` operation. */
    var PutDesignDocumentConstants;
    (function (PutDesignDocumentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = PutDesignDocumentConstants.Batch || (PutDesignDocumentConstants.Batch = {}));
    })(PutDesignDocumentConstants = CloudantV1.PutDesignDocumentConstants || (CloudantV1.PutDesignDocumentConstants = {}));
    /** Constants for the `postDesignDocs` operation. */
    var PostDesignDocsConstants;
    (function (PostDesignDocsConstants) {
        /** The type of the response: application/json or application/octet-stream. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
        })(Accept = PostDesignDocsConstants.Accept || (PostDesignDocsConstants.Accept = {}));
    })(PostDesignDocsConstants = CloudantV1.PostDesignDocsConstants || (CloudantV1.PostDesignDocsConstants = {}));
    /** Constants for the `postDesignDocsQueries` operation. */
    var PostDesignDocsQueriesConstants;
    (function (PostDesignDocsQueriesConstants) {
        /** The type of the response: application/json or application/octet-stream. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
        })(Accept = PostDesignDocsQueriesConstants.Accept || (PostDesignDocsQueriesConstants.Accept = {}));
    })(PostDesignDocsQueriesConstants = CloudantV1.PostDesignDocsQueriesConstants || (CloudantV1.PostDesignDocsQueriesConstants = {}));
    /** Constants for the `postView` operation. */
    var PostViewConstants;
    (function (PostViewConstants) {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. */
        var Update;
        (function (Update) {
            Update["TRUE"] = "true";
            Update["FALSE"] = "false";
            Update["LAZY"] = "lazy";
        })(Update = PostViewConstants.Update || (PostViewConstants.Update = {}));
    })(PostViewConstants = CloudantV1.PostViewConstants || (CloudantV1.PostViewConstants = {}));
    /** Constants for the `postViewAsStream` operation. */
    var PostViewAsStreamConstants;
    (function (PostViewAsStreamConstants) {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. */
        var Update;
        (function (Update) {
            Update["TRUE"] = "true";
            Update["FALSE"] = "false";
            Update["LAZY"] = "lazy";
        })(Update = PostViewAsStreamConstants.Update || (PostViewAsStreamConstants.Update = {}));
    })(PostViewAsStreamConstants = CloudantV1.PostViewAsStreamConstants || (CloudantV1.PostViewAsStreamConstants = {}));
    /** Constants for the `postPartitionSearch` operation. */
    var PostPartitionSearchConstants;
    (function (PostPartitionSearchConstants) {
        /** Do not wait for the index to finish building to return results. */
        var Stale;
        (function (Stale) {
            Stale["OK"] = "ok";
        })(Stale = PostPartitionSearchConstants.Stale || (PostPartitionSearchConstants.Stale = {}));
    })(PostPartitionSearchConstants = CloudantV1.PostPartitionSearchConstants || (CloudantV1.PostPartitionSearchConstants = {}));
    /** Constants for the `postPartitionSearchAsStream` operation. */
    var PostPartitionSearchAsStreamConstants;
    (function (PostPartitionSearchAsStreamConstants) {
        /** Do not wait for the index to finish building to return results. */
        var Stale;
        (function (Stale) {
            Stale["OK"] = "ok";
        })(Stale = PostPartitionSearchAsStreamConstants.Stale || (PostPartitionSearchAsStreamConstants.Stale = {}));
    })(PostPartitionSearchAsStreamConstants = CloudantV1.PostPartitionSearchAsStreamConstants || (CloudantV1.PostPartitionSearchAsStreamConstants = {}));
    /** Constants for the `postPartitionView` operation. */
    var PostPartitionViewConstants;
    (function (PostPartitionViewConstants) {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. */
        var Update;
        (function (Update) {
            Update["TRUE"] = "true";
            Update["FALSE"] = "false";
            Update["LAZY"] = "lazy";
        })(Update = PostPartitionViewConstants.Update || (PostPartitionViewConstants.Update = {}));
    })(PostPartitionViewConstants = CloudantV1.PostPartitionViewConstants || (CloudantV1.PostPartitionViewConstants = {}));
    /** Constants for the `postPartitionViewAsStream` operation. */
    var PostPartitionViewAsStreamConstants;
    (function (PostPartitionViewAsStreamConstants) {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. */
        var Update;
        (function (Update) {
            Update["TRUE"] = "true";
            Update["FALSE"] = "false";
            Update["LAZY"] = "lazy";
        })(Update = PostPartitionViewAsStreamConstants.Update || (PostPartitionViewAsStreamConstants.Update = {}));
    })(PostPartitionViewAsStreamConstants = CloudantV1.PostPartitionViewAsStreamConstants || (CloudantV1.PostPartitionViewAsStreamConstants = {}));
    /** Constants for the `postPartitionFind` operation. */
    var PostPartitionFindConstants;
    (function (PostPartitionFindConstants) {
        /** Schema for a mapping of field name to sort direction. */
        var Sort;
        (function (Sort) {
            Sort["ASC"] = "asc";
            Sort["DESC"] = "desc";
        })(Sort = PostPartitionFindConstants.Sort || (PostPartitionFindConstants.Sort = {}));
        /** Whether to update the index prior to returning the result. */
        var Update;
        (function (Update) {
            Update["FALSE"] = "false";
            Update["TRUE"] = "true";
            Update["LAZY"] = "lazy";
        })(Update = PostPartitionFindConstants.Update || (PostPartitionFindConstants.Update = {}));
    })(PostPartitionFindConstants = CloudantV1.PostPartitionFindConstants || (CloudantV1.PostPartitionFindConstants = {}));
    /** Constants for the `postPartitionFindAsStream` operation. */
    var PostPartitionFindAsStreamConstants;
    (function (PostPartitionFindAsStreamConstants) {
        /** Schema for a mapping of field name to sort direction. */
        var Sort;
        (function (Sort) {
            Sort["ASC"] = "asc";
            Sort["DESC"] = "desc";
        })(Sort = PostPartitionFindAsStreamConstants.Sort || (PostPartitionFindAsStreamConstants.Sort = {}));
        /** Whether to update the index prior to returning the result. */
        var Update;
        (function (Update) {
            Update["FALSE"] = "false";
            Update["TRUE"] = "true";
            Update["LAZY"] = "lazy";
        })(Update = PostPartitionFindAsStreamConstants.Update || (PostPartitionFindAsStreamConstants.Update = {}));
    })(PostPartitionFindAsStreamConstants = CloudantV1.PostPartitionFindAsStreamConstants || (CloudantV1.PostPartitionFindAsStreamConstants = {}));
    /** Constants for the `postExplain` operation. */
    var PostExplainConstants;
    (function (PostExplainConstants) {
        /** Schema for a mapping of field name to sort direction. */
        var Sort;
        (function (Sort) {
            Sort["ASC"] = "asc";
            Sort["DESC"] = "desc";
        })(Sort = PostExplainConstants.Sort || (PostExplainConstants.Sort = {}));
        /** Whether to update the index prior to returning the result. */
        var Update;
        (function (Update) {
            Update["FALSE"] = "false";
            Update["TRUE"] = "true";
            Update["LAZY"] = "lazy";
        })(Update = PostExplainConstants.Update || (PostExplainConstants.Update = {}));
    })(PostExplainConstants = CloudantV1.PostExplainConstants || (CloudantV1.PostExplainConstants = {}));
    /** Constants for the `postFind` operation. */
    var PostFindConstants;
    (function (PostFindConstants) {
        /** Schema for a mapping of field name to sort direction. */
        var Sort;
        (function (Sort) {
            Sort["ASC"] = "asc";
            Sort["DESC"] = "desc";
        })(Sort = PostFindConstants.Sort || (PostFindConstants.Sort = {}));
        /** Whether to update the index prior to returning the result. */
        var Update;
        (function (Update) {
            Update["FALSE"] = "false";
            Update["TRUE"] = "true";
            Update["LAZY"] = "lazy";
        })(Update = PostFindConstants.Update || (PostFindConstants.Update = {}));
    })(PostFindConstants = CloudantV1.PostFindConstants || (CloudantV1.PostFindConstants = {}));
    /** Constants for the `postFindAsStream` operation. */
    var PostFindAsStreamConstants;
    (function (PostFindAsStreamConstants) {
        /** Schema for a mapping of field name to sort direction. */
        var Sort;
        (function (Sort) {
            Sort["ASC"] = "asc";
            Sort["DESC"] = "desc";
        })(Sort = PostFindAsStreamConstants.Sort || (PostFindAsStreamConstants.Sort = {}));
        /** Whether to update the index prior to returning the result. */
        var Update;
        (function (Update) {
            Update["FALSE"] = "false";
            Update["TRUE"] = "true";
            Update["LAZY"] = "lazy";
        })(Update = PostFindAsStreamConstants.Update || (PostFindAsStreamConstants.Update = {}));
    })(PostFindAsStreamConstants = CloudantV1.PostFindAsStreamConstants || (CloudantV1.PostFindAsStreamConstants = {}));
    /** Constants for the `postIndex` operation. */
    var PostIndexConstants;
    (function (PostIndexConstants) {
        /** Schema for the type of an index. */
        var Type;
        (function (Type) {
            Type["JSON"] = "json";
            Type["SPECIAL"] = "special";
            Type["TEXT"] = "text";
        })(Type = PostIndexConstants.Type || (PostIndexConstants.Type = {}));
    })(PostIndexConstants = CloudantV1.PostIndexConstants || (CloudantV1.PostIndexConstants = {}));
    /** Constants for the `deleteIndex` operation. */
    var DeleteIndexConstants;
    (function (DeleteIndexConstants) {
        /** Path parameter to specify the index type. */
        var Type;
        (function (Type) {
            Type["JSON"] = "json";
            Type["SPECIAL"] = "special";
            Type["TEXT"] = "text";
        })(Type = DeleteIndexConstants.Type || (DeleteIndexConstants.Type = {}));
    })(DeleteIndexConstants = CloudantV1.DeleteIndexConstants || (CloudantV1.DeleteIndexConstants = {}));
    /** Constants for the `postSearchAnalyze` operation. */
    var PostSearchAnalyzeConstants;
    (function (PostSearchAnalyzeConstants) {
        /** The analyzer type that is being used at the tokenization. */
        var Analyzer;
        (function (Analyzer) {
            Analyzer["ARABIC"] = "arabic";
            Analyzer["ARMENIAN"] = "armenian";
            Analyzer["BASQUE"] = "basque";
            Analyzer["BRAZILIAN"] = "brazilian";
            Analyzer["BULGARIAN"] = "bulgarian";
            Analyzer["CATALAN"] = "catalan";
            Analyzer["CHINESE"] = "chinese";
            Analyzer["CJK"] = "cjk";
            Analyzer["CLASSIC"] = "classic";
            Analyzer["CZECH"] = "czech";
            Analyzer["DANISH"] = "danish";
            Analyzer["DUTCH"] = "dutch";
            Analyzer["EMAIL"] = "email";
            Analyzer["ENGLISH"] = "english";
            Analyzer["FINNISH"] = "finnish";
            Analyzer["FRENCH"] = "french";
            Analyzer["GALICIAN"] = "galician";
            Analyzer["GERMAN"] = "german";
            Analyzer["GREEK"] = "greek";
            Analyzer["HINDI"] = "hindi";
            Analyzer["HUNGARIAN"] = "hungarian";
            Analyzer["INDONESIAN"] = "indonesian";
            Analyzer["IRISH"] = "irish";
            Analyzer["ITALIAN"] = "italian";
            Analyzer["JAPANESE"] = "japanese";
            Analyzer["KEYWORD"] = "keyword";
            Analyzer["LATVIAN"] = "latvian";
            Analyzer["NORWEGIAN"] = "norwegian";
            Analyzer["PERSIAN"] = "persian";
            Analyzer["POLISH"] = "polish";
            Analyzer["PORTUGUESE"] = "portuguese";
            Analyzer["ROMANIAN"] = "romanian";
            Analyzer["RUSSIAN"] = "russian";
            Analyzer["SIMPLE"] = "simple";
            Analyzer["SPANISH"] = "spanish";
            Analyzer["STANDARD"] = "standard";
            Analyzer["SWEDISH"] = "swedish";
            Analyzer["THAI"] = "thai";
            Analyzer["TURKISH"] = "turkish";
            Analyzer["WHITESPACE"] = "whitespace";
        })(Analyzer = PostSearchAnalyzeConstants.Analyzer || (PostSearchAnalyzeConstants.Analyzer = {}));
    })(PostSearchAnalyzeConstants = CloudantV1.PostSearchAnalyzeConstants || (CloudantV1.PostSearchAnalyzeConstants = {}));
    /** Constants for the `postSearch` operation. */
    var PostSearchConstants;
    (function (PostSearchConstants) {
        /** Do not wait for the index to finish building to return results. */
        var Stale;
        (function (Stale) {
            Stale["OK"] = "ok";
        })(Stale = PostSearchConstants.Stale || (PostSearchConstants.Stale = {}));
    })(PostSearchConstants = CloudantV1.PostSearchConstants || (CloudantV1.PostSearchConstants = {}));
    /** Constants for the `postSearchAsStream` operation. */
    var PostSearchAsStreamConstants;
    (function (PostSearchAsStreamConstants) {
        /** Do not wait for the index to finish building to return results. */
        var Stale;
        (function (Stale) {
            Stale["OK"] = "ok";
        })(Stale = PostSearchAsStreamConstants.Stale || (PostSearchAsStreamConstants.Stale = {}));
    })(PostSearchAsStreamConstants = CloudantV1.PostSearchAsStreamConstants || (CloudantV1.PostSearchAsStreamConstants = {}));
    /** Constants for the `getGeo` operation. */
    var GetGeoConstants;
    (function (GetGeoConstants) {
        /** Query parameter that causes the geospatial query output to be returned in the specified format. */
        var Format;
        (function (Format) {
            Format["LEGACY"] = "legacy";
            Format["GEOJSON"] = "geojson";
            Format["VIEW"] = "view";
            Format["APPLICATION_VND_GEO_JSON"] = "application/vnd.geo+json";
        })(Format = GetGeoConstants.Format || (GetGeoConstants.Format = {}));
        /** Query parameter to specify the DE-9IM (Dimensionally Extended nine-Intersection Model)geospatial relationship between the query geometry and the result documents. */
        var Relation;
        (function (Relation) {
            Relation["CONTAINS"] = "contains";
            Relation["CONTAINS_PROPERLY"] = "contains_properly";
            Relation["COVERED_BY"] = "covered_by";
            Relation["COVERS"] = "covers";
            Relation["CROSSES"] = "crosses";
            Relation["DISJOINT"] = "disjoint";
            Relation["INTERSECTS"] = "intersects";
            Relation["OVERLAPS"] = "overlaps";
            Relation["TOUCHES"] = "touches";
            Relation["WITHIN"] = "within";
        })(Relation = GetGeoConstants.Relation || (GetGeoConstants.Relation = {}));
        /** Query parameter to specify to not wait for the index to finish building before returning results. */
        var Stale;
        (function (Stale) {
            Stale["OK"] = "ok";
        })(Stale = GetGeoConstants.Stale || (GetGeoConstants.Stale = {}));
    })(GetGeoConstants = CloudantV1.GetGeoConstants || (CloudantV1.GetGeoConstants = {}));
    /** Constants for the `getGeoAsStream` operation. */
    var GetGeoAsStreamConstants;
    (function (GetGeoAsStreamConstants) {
        /** Query parameter that causes the geospatial query output to be returned in the specified format. */
        var Format;
        (function (Format) {
            Format["LEGACY"] = "legacy";
            Format["GEOJSON"] = "geojson";
            Format["VIEW"] = "view";
            Format["APPLICATION_VND_GEO_JSON"] = "application/vnd.geo+json";
        })(Format = GetGeoAsStreamConstants.Format || (GetGeoAsStreamConstants.Format = {}));
        /** Query parameter to specify the DE-9IM (Dimensionally Extended nine-Intersection Model)geospatial relationship between the query geometry and the result documents. */
        var Relation;
        (function (Relation) {
            Relation["CONTAINS"] = "contains";
            Relation["CONTAINS_PROPERLY"] = "contains_properly";
            Relation["COVERED_BY"] = "covered_by";
            Relation["COVERS"] = "covers";
            Relation["CROSSES"] = "crosses";
            Relation["DISJOINT"] = "disjoint";
            Relation["INTERSECTS"] = "intersects";
            Relation["OVERLAPS"] = "overlaps";
            Relation["TOUCHES"] = "touches";
            Relation["WITHIN"] = "within";
        })(Relation = GetGeoAsStreamConstants.Relation || (GetGeoAsStreamConstants.Relation = {}));
        /** Query parameter to specify to not wait for the index to finish building before returning results. */
        var Stale;
        (function (Stale) {
            Stale["OK"] = "ok";
        })(Stale = GetGeoAsStreamConstants.Stale || (GetGeoAsStreamConstants.Stale = {}));
    })(GetGeoAsStreamConstants = CloudantV1.GetGeoAsStreamConstants || (CloudantV1.GetGeoAsStreamConstants = {}));
    /** Constants for the `deleteReplicationDocument` operation. */
    var DeleteReplicationDocumentConstants;
    (function (DeleteReplicationDocumentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = DeleteReplicationDocumentConstants.Batch || (DeleteReplicationDocumentConstants.Batch = {}));
    })(DeleteReplicationDocumentConstants = CloudantV1.DeleteReplicationDocumentConstants || (CloudantV1.DeleteReplicationDocumentConstants = {}));
    /** Constants for the `putReplicationDocument` operation. */
    var PutReplicationDocumentConstants;
    (function (PutReplicationDocumentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = PutReplicationDocumentConstants.Batch || (PutReplicationDocumentConstants.Batch = {}));
    })(PutReplicationDocumentConstants = CloudantV1.PutReplicationDocumentConstants || (CloudantV1.PutReplicationDocumentConstants = {}));
    /** Constants for the `getSchedulerDocs` operation. */
    var GetSchedulerDocsConstants;
    (function (GetSchedulerDocsConstants) {
        /** Query parameter to include only replication documents in the specified states. String must be a comma-delimited string. */
        var States;
        (function (States) {
            States["INITIALIZING"] = "initializing";
            States["ERROR"] = "error";
            States["PENDING"] = "pending";
            States["RUNNING"] = "running";
            States["CRASHING"] = "crashing";
            States["COMPLETED"] = "completed";
            States["FAILED"] = "failed";
        })(States = GetSchedulerDocsConstants.States || (GetSchedulerDocsConstants.States = {}));
    })(GetSchedulerDocsConstants = CloudantV1.GetSchedulerDocsConstants || (CloudantV1.GetSchedulerDocsConstants = {}));
    /** Constants for the `putSecurity` operation. */
    var PutSecurityConstants;
    (function (PutSecurityConstants) {
        /** Database permissions for Cloudant users and/or API keys. */
        var Cloudant;
        (function (Cloudant) {
            Cloudant["READER"] = "_reader";
            Cloudant["WRITER"] = "_writer";
            Cloudant["ADMIN"] = "_admin";
            Cloudant["REPLICATOR"] = "_replicator";
            Cloudant["DB_UPDATES"] = "_db_updates";
            Cloudant["DESIGN"] = "_design";
            Cloudant["SHARDS"] = "_shards";
            Cloudant["SECURITY"] = "_security";
        })(Cloudant = PutSecurityConstants.Cloudant || (PutSecurityConstants.Cloudant = {}));
    })(PutSecurityConstants = CloudantV1.PutSecurityConstants || (CloudantV1.PutSecurityConstants = {}));
    /** Constants for the `putCloudantSecurityConfiguration` operation. */
    var PutCloudantSecurityConfigurationConstants;
    (function (PutCloudantSecurityConfigurationConstants) {
        /** Database permissions for Cloudant users and/or API keys. */
        var Cloudant;
        (function (Cloudant) {
            Cloudant["READER"] = "_reader";
            Cloudant["WRITER"] = "_writer";
            Cloudant["ADMIN"] = "_admin";
            Cloudant["REPLICATOR"] = "_replicator";
            Cloudant["DB_UPDATES"] = "_db_updates";
            Cloudant["DESIGN"] = "_design";
            Cloudant["SHARDS"] = "_shards";
            Cloudant["SECURITY"] = "_security";
        })(Cloudant = PutCloudantSecurityConfigurationConstants.Cloudant || (PutCloudantSecurityConfigurationConstants.Cloudant = {}));
    })(PutCloudantSecurityConfigurationConstants = CloudantV1.PutCloudantSecurityConfigurationConstants || (CloudantV1.PutCloudantSecurityConfigurationConstants = {}));
    /** Constants for the `deleteAttachment` operation. */
    var DeleteAttachmentConstants;
    (function (DeleteAttachmentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = DeleteAttachmentConstants.Batch || (DeleteAttachmentConstants.Batch = {}));
    })(DeleteAttachmentConstants = CloudantV1.DeleteAttachmentConstants || (CloudantV1.DeleteAttachmentConstants = {}));
    /** Constants for the `deleteLocalDocument` operation. */
    var DeleteLocalDocumentConstants;
    (function (DeleteLocalDocumentConstants) {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = DeleteLocalDocumentConstants.Batch || (DeleteLocalDocumentConstants.Batch = {}));
    })(DeleteLocalDocumentConstants = CloudantV1.DeleteLocalDocumentConstants || (CloudantV1.DeleteLocalDocumentConstants = {}));
    /** Constants for the `getLocalDocument` operation. */
    var GetLocalDocumentConstants;
    (function (GetLocalDocumentConstants) {
        /** The type of the response: application/json, multipart/mixed, multipart/related, or application/octet-stream. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["MULTIPART_MIXED"] = "multipart/mixed";
            Accept["MULTIPART_RELATED"] = "multipart/related";
            Accept["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
        })(Accept = GetLocalDocumentConstants.Accept || (GetLocalDocumentConstants.Accept = {}));
    })(GetLocalDocumentConstants = CloudantV1.GetLocalDocumentConstants || (CloudantV1.GetLocalDocumentConstants = {}));
    /** Constants for the `putLocalDocument` operation. */
    var PutLocalDocumentConstants;
    (function (PutLocalDocumentConstants) {
        /** The type of the input. */
        var ContentType;
        (function (ContentType) {
            ContentType["APPLICATION_JSON"] = "application/json";
            ContentType["MULTIPART_MIXED"] = "multipart/mixed";
            ContentType["MULTIPART_RELATED"] = "multipart/related";
            ContentType["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
        })(ContentType = PutLocalDocumentConstants.ContentType || (PutLocalDocumentConstants.ContentType = {}));
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        var Batch;
        (function (Batch) {
            Batch["OK"] = "ok";
        })(Batch = PutLocalDocumentConstants.Batch || (PutLocalDocumentConstants.Batch = {}));
    })(PutLocalDocumentConstants = CloudantV1.PutLocalDocumentConstants || (CloudantV1.PutLocalDocumentConstants = {}));
    /** Constants for the `postActivityTrackerEvents` operation. */
    var PostActivityTrackerEventsConstants;
    (function (PostActivityTrackerEventsConstants) {
        /** Types */
        var Types;
        (function (Types) {
            Types["MANAGEMENT"] = "management";
            Types["DATA"] = "data";
        })(Types = PostActivityTrackerEventsConstants.Types || (PostActivityTrackerEventsConstants.Types = {}));
    })(PostActivityTrackerEventsConstants = CloudantV1.PostActivityTrackerEventsConstants || (CloudantV1.PostActivityTrackerEventsConstants = {}));
})(CloudantV1 || (CloudantV1 = {}));
module.exports = CloudantV1;
//# sourceMappingURL=v1.js.map