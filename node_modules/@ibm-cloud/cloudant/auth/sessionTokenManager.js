"use strict";
/**
 * Â© Copyright IBM Corporation 2020. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionTokenManager = void 0;
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
/**
 * Token Manager of CouchDB session token.
 *
 * The Token Manager performs basic auth with username and password
 * to acquire session tokens.
 */
var SessionTokenManager = /** @class */ (function (_super) {
    __extends(SessionTokenManager, _super);
    /**
     * Create a new [[SessionTokenManager]] instance. For internal use by
     * CouchdbSessionAuthenticator only.
     *
     * @param {object} options Configuration options.
     * @param {string} options.username The username portion of CouchDB Session authentication.
     * @param {string} options.password The password portion of CouchDB Session authentication.
     * @param {string} options.serviceUrl The endpoint for session token requests.
     * @param {any} options.jar The Cookie jar for session token storage.
     * @param {boolean} [options.disableSslVerification] A flag that indicates
     *   whether verification of the token server's SSL certificate should be
     *   disabled or not.
     * @param {object<string, string>} [options.headers] Headers to be sent with every
     *   outbound HTTP requests to token services.
     * @constructor
     */
    function SessionTokenManager(options) {
        var _this = _super.call(this, options) || this;
        _this.requiredOptions = [
            'username',
            'password',
            'serviceUrl',
            'jar',
        ];
        ibm_cloud_sdk_core_1.validateInput(options, _this.requiredOptions);
        _this.options = options;
        _this.tokenName = 'AuthSession';
        return _this;
    }
    /**
     * Only base service specific headers are in use.
     *
     * @param {OutgoingHttpHeaders} headers - the new set of headers as an object
     * @returns {Error}
     */
    SessionTokenManager.prototype.setHeaders = function (headers) {
        var errMsg = 'During CouchDB Session Authentication only `request` service headers are in use';
        throw new Error(errMsg);
    };
    /**
     * Request a session token using basic credentials.
     *
     * @returns {Promise}
     */
    SessionTokenManager.prototype.requestToken = function () {
        if (!this.options.headers) {
            this.options.headers = {};
        }
        // these cannot be overwritten
        var parameters = {
            options: {
                headers: this.options.headers,
                url: this.options.serviceUrl + '/_session',
                method: 'POST',
                body: {
                    username: this.options.username,
                    password: this.options.password,
                },
            },
        };
        return this.requestWrapperInstance.sendRequest(parameters);
    };
    /**
     * From the response parse and save session token into field `accessToken`.
     * Calculate expiration and refresh time from the received response
     * and store them in fields `expireTime` and `refreshTime`.
     *
     * @param tokenResponse - Response object from session token request
     * @private
     * @returns {void}
     */
    SessionTokenManager.prototype.saveTokenInfo = function (tokenResponse) {
        var sessionCookie = tokenResponse.headers['set-cookie'];
        if (!(sessionCookie instanceof Array)) {
            var err = 'Set-Cookie header not present in response';
            throw new Error(err);
        }
        var sessionToken = null;
        var expireTime = null;
        var refreshTime = null;
        for (var i = 0; i < sessionCookie.length && sessionToken == null; i++) {
            sessionToken = new RegExp('AuthSession=([^;]*);').exec(sessionCookie[i]);
            if (sessionToken != null) {
                expireTime = new RegExp('.*Expires=([^;]*);').exec(sessionCookie[i]);
                refreshTime = new RegExp('.*Max-Age=([^;]*);').exec(sessionCookie[i]);
            }
        }
        if (sessionToken == null) {
            var err = 'Session token not present in response';
            throw new Error(err);
        }
        this.accessToken = sessionToken[1];
        var fractionOfTtl = 0.8;
        if (expireTime == null) {
            if (refreshTime == null) {
                this.expireTime = 0;
                this.refreshTime = 0;
            }
            else {
                this.expireTime = Number(refreshTime[1]) + ibm_cloud_sdk_core_1.getCurrentTime();
                this.refreshTime =
                    Number(refreshTime[1]) * fractionOfTtl + ibm_cloud_sdk_core_1.getCurrentTime();
            }
        }
        else {
            // Store expire time in seconds
            this.expireTime = Date.parse(expireTime[1]) / 1000;
            // Set refresh time from the expire time
            var timeToLive = this.expireTime - ibm_cloud_sdk_core_1.getCurrentTime();
            this.refreshTime = this.expireTime - timeToLive * (1.0 - fractionOfTtl);
        }
    };
    return SessionTokenManager;
}(ibm_cloud_sdk_core_1.TokenManager));
exports.SessionTokenManager = SessionTokenManager;
//# sourceMappingURL=sessionTokenManager.js.map